// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
)

type RegisterReq struct {
	Email    string `thrift:"email,1" frugal:"1,default,string" json:"email"`
	Password string `thrift:"password,2" frugal:"2,default,string" json:"password"`
	Username string `thrift:"username,3" frugal:"3,default,string" json:"username"`
	IsSeller bool   `thrift:"is_seller,4" frugal:"4,default,bool" json:"is_seller"`
}

func NewRegisterReq() *RegisterReq {
	return &RegisterReq{}
}

func (p *RegisterReq) InitDefault() {
}

func (p *RegisterReq) GetEmail() (v string) {
	return p.Email
}

func (p *RegisterReq) GetPassword() (v string) {
	return p.Password
}

func (p *RegisterReq) GetUsername() (v string) {
	return p.Username
}

func (p *RegisterReq) GetIsSeller() (v bool) {
	return p.IsSeller
}
func (p *RegisterReq) SetEmail(val string) {
	p.Email = val
}
func (p *RegisterReq) SetPassword(val string) {
	p.Password = val
}
func (p *RegisterReq) SetUsername(val string) {
	p.Username = val
}
func (p *RegisterReq) SetIsSeller(val bool) {
	p.IsSeller = val
}

func (p *RegisterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterReq(%+v)", *p)
}

var fieldIDToName_RegisterReq = map[int16]string{
	1: "email",
	2: "password",
	3: "username",
	4: "is_seller",
}

type RegisterResp struct {
	UserId  int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	Success bool  `thrift:"success,2" frugal:"2,default,bool" json:"success"`
}

func NewRegisterResp() *RegisterResp {
	return &RegisterResp{}
}

func (p *RegisterResp) InitDefault() {
}

func (p *RegisterResp) GetUserId() (v int32) {
	return p.UserId
}

func (p *RegisterResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *RegisterResp) SetUserId(val int32) {
	p.UserId = val
}
func (p *RegisterResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *RegisterResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterResp(%+v)", *p)
}

var fieldIDToName_RegisterResp = map[int16]string{
	1: "user_id",
	2: "success",
}

type SellerReq struct {
	UserId int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
}

func NewSellerReq() *SellerReq {
	return &SellerReq{}
}

func (p *SellerReq) InitDefault() {
}

func (p *SellerReq) GetUserId() (v int32) {
	return p.UserId
}
func (p *SellerReq) SetUserId(val int32) {
	p.UserId = val
}

func (p *SellerReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SellerReq(%+v)", *p)
}

var fieldIDToName_SellerReq = map[int16]string{
	1: "user_id",
}

type SellerResp struct {
	IsSeller bool `thrift:"is_seller,1" frugal:"1,default,bool" json:"is_seller"`
}

func NewSellerResp() *SellerResp {
	return &SellerResp{}
}

func (p *SellerResp) InitDefault() {
}

func (p *SellerResp) GetIsSeller() (v bool) {
	return p.IsSeller
}
func (p *SellerResp) SetIsSeller(val bool) {
	p.IsSeller = val
}

func (p *SellerResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SellerResp(%+v)", *p)
}

var fieldIDToName_SellerResp = map[int16]string{
	1: "is_seller",
}

type LoginReq struct {
	Email    string `thrift:"email,1" frugal:"1,default,string" json:"email"`
	Password string `thrift:"password,2" frugal:"2,default,string" json:"password"`
}

func NewLoginReq() *LoginReq {
	return &LoginReq{}
}

func (p *LoginReq) InitDefault() {
}

func (p *LoginReq) GetEmail() (v string) {
	return p.Email
}

func (p *LoginReq) GetPassword() (v string) {
	return p.Password
}
func (p *LoginReq) SetEmail(val string) {
	p.Email = val
}
func (p *LoginReq) SetPassword(val string) {
	p.Password = val
}

func (p *LoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginReq(%+v)", *p)
}

var fieldIDToName_LoginReq = map[int16]string{
	1: "email",
	2: "password",
}

type LoginResp struct {
	Success bool  `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	UserId  int32 `thrift:"user_id,2" frugal:"2,default,i32" json:"user_id"`
}

func NewLoginResp() *LoginResp {
	return &LoginResp{}
}

func (p *LoginResp) InitDefault() {
}

func (p *LoginResp) GetSuccess() (v bool) {
	return p.Success
}

func (p *LoginResp) GetUserId() (v int32) {
	return p.UserId
}
func (p *LoginResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *LoginResp) SetUserId(val int32) {
	p.UserId = val
}

func (p *LoginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResp(%+v)", *p)
}

var fieldIDToName_LoginResp = map[int16]string{
	1: "success",
	2: "user_id",
}

type GetUserReq struct {
	UserId int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
}

func NewGetUserReq() *GetUserReq {
	return &GetUserReq{}
}

func (p *GetUserReq) InitDefault() {
}

func (p *GetUserReq) GetUserId() (v int32) {
	return p.UserId
}
func (p *GetUserReq) SetUserId(val int32) {
	p.UserId = val
}

func (p *GetUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserReq(%+v)", *p)
}

var fieldIDToName_GetUserReq = map[int16]string{
	1: "user_id",
}

type GetUserResp struct {
	Success   bool           `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Username  string         `thrift:"username,2" frugal:"2,default,string" json:"username"`
	Email     string         `thrift:"email,3" frugal:"3,default,string" json:"email"`
	Password  string         `thrift:"password,4" frugal:"4,default,string" json:"password"`
	Addresses []*UserAddress `thrift:"addresses,5" frugal:"5,default,list<UserAddress>" json:"addresses"`
}

func NewGetUserResp() *GetUserResp {
	return &GetUserResp{}
}

func (p *GetUserResp) InitDefault() {
}

func (p *GetUserResp) GetSuccess() (v bool) {
	return p.Success
}

func (p *GetUserResp) GetUsername() (v string) {
	return p.Username
}

func (p *GetUserResp) GetEmail() (v string) {
	return p.Email
}

func (p *GetUserResp) GetPassword() (v string) {
	return p.Password
}

func (p *GetUserResp) GetAddresses() (v []*UserAddress) {
	return p.Addresses
}
func (p *GetUserResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *GetUserResp) SetUsername(val string) {
	p.Username = val
}
func (p *GetUserResp) SetEmail(val string) {
	p.Email = val
}
func (p *GetUserResp) SetPassword(val string) {
	p.Password = val
}
func (p *GetUserResp) SetAddresses(val []*UserAddress) {
	p.Addresses = val
}

func (p *GetUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserResp(%+v)", *p)
}

var fieldIDToName_GetUserResp = map[int16]string{
	1: "success",
	2: "username",
	3: "email",
	4: "password",
	5: "addresses",
}

type User struct {
	UserId       int32  `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	Username     string `thrift:"username,2" frugal:"2,default,string" json:"username"`
	Email        string `thrift:"email,3" frugal:"3,default,string" json:"email"`
	RefreshToken string `thrift:"refresh_token,4" frugal:"4,default,string" json:"refresh_token"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetUserId() (v int32) {
	return p.UserId
}

func (p *User) GetUsername() (v string) {
	return p.Username
}

func (p *User) GetEmail() (v string) {
	return p.Email
}

func (p *User) GetRefreshToken() (v string) {
	return p.RefreshToken
}
func (p *User) SetUserId(val int32) {
	p.UserId = val
}
func (p *User) SetUsername(val string) {
	p.Username = val
}
func (p *User) SetEmail(val string) {
	p.Email = val
}
func (p *User) SetRefreshToken(val string) {
	p.RefreshToken = val
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1: "user_id",
	2: "username",
	3: "email",
	4: "refresh_token",
}

type AdminListUserReq struct {
	PageNum  int32 `thrift:"page_num,1" frugal:"1,default,i32" json:"page_num"`
	PageSize int32 `thrift:"page_size,2" frugal:"2,default,i32" json:"page_size"`
}

func NewAdminListUserReq() *AdminListUserReq {
	return &AdminListUserReq{}
}

func (p *AdminListUserReq) InitDefault() {
}

func (p *AdminListUserReq) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *AdminListUserReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *AdminListUserReq) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *AdminListUserReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *AdminListUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminListUserReq(%+v)", *p)
}

var fieldIDToName_AdminListUserReq = map[int16]string{
	1: "page_num",
	2: "page_size",
}

type AdminListUserResp struct {
	Users      []*User `thrift:"users,1" frugal:"1,default,list<User>" json:"users"`
	Message    string  `thrift:"message,2" frugal:"2,default,string" json:"message"`
	TotalCount int64   `thrift:"total_count,3" frugal:"3,default,i64" json:"total_count"`
}

func NewAdminListUserResp() *AdminListUserResp {
	return &AdminListUserResp{}
}

func (p *AdminListUserResp) InitDefault() {
}

func (p *AdminListUserResp) GetUsers() (v []*User) {
	return p.Users
}

func (p *AdminListUserResp) GetMessage() (v string) {
	return p.Message
}

func (p *AdminListUserResp) GetTotalCount() (v int64) {
	return p.TotalCount
}
func (p *AdminListUserResp) SetUsers(val []*User) {
	p.Users = val
}
func (p *AdminListUserResp) SetMessage(val string) {
	p.Message = val
}
func (p *AdminListUserResp) SetTotalCount(val int64) {
	p.TotalCount = val
}

func (p *AdminListUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminListUserResp(%+v)", *p)
}

var fieldIDToName_AdminListUserResp = map[int16]string{
	1: "users",
	2: "message",
	3: "total_count",
}

type UserAddress struct {
	AddressName  string `thrift:"address_name,1" frugal:"1,default,string" json:"address_name"`
	AddressPhone string `thrift:"address_phone,2" frugal:"2,default,string" json:"address_phone"`
	Address      string `thrift:"address,3" frugal:"3,default,string" json:"address"`
}

func NewUserAddress() *UserAddress {
	return &UserAddress{}
}

func (p *UserAddress) InitDefault() {
}

func (p *UserAddress) GetAddressName() (v string) {
	return p.AddressName
}

func (p *UserAddress) GetAddressPhone() (v string) {
	return p.AddressPhone
}

func (p *UserAddress) GetAddress() (v string) {
	return p.Address
}
func (p *UserAddress) SetAddressName(val string) {
	p.AddressName = val
}
func (p *UserAddress) SetAddressPhone(val string) {
	p.AddressPhone = val
}
func (p *UserAddress) SetAddress(val string) {
	p.Address = val
}

func (p *UserAddress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAddress(%+v)", *p)
}

var fieldIDToName_UserAddress = map[int16]string{
	1: "address_name",
	2: "address_phone",
	3: "address",
}

type UpdateUserReq struct {
	UserId         int32          `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	Name           string         `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Email          string         `thrift:"email,3" frugal:"3,default,string" json:"email"`
	PasswordHashed string         `thrift:"password_hashed,4" frugal:"4,default,string" json:"password_hashed"`
	Addresses      []*UserAddress `thrift:"addresses,5" frugal:"5,default,list<UserAddress>" json:"addresses"`
}

func NewUpdateUserReq() *UpdateUserReq {
	return &UpdateUserReq{}
}

func (p *UpdateUserReq) InitDefault() {
}

func (p *UpdateUserReq) GetUserId() (v int32) {
	return p.UserId
}

func (p *UpdateUserReq) GetName() (v string) {
	return p.Name
}

func (p *UpdateUserReq) GetEmail() (v string) {
	return p.Email
}

func (p *UpdateUserReq) GetPasswordHashed() (v string) {
	return p.PasswordHashed
}

func (p *UpdateUserReq) GetAddresses() (v []*UserAddress) {
	return p.Addresses
}
func (p *UpdateUserReq) SetUserId(val int32) {
	p.UserId = val
}
func (p *UpdateUserReq) SetName(val string) {
	p.Name = val
}
func (p *UpdateUserReq) SetEmail(val string) {
	p.Email = val
}
func (p *UpdateUserReq) SetPasswordHashed(val string) {
	p.PasswordHashed = val
}
func (p *UpdateUserReq) SetAddresses(val []*UserAddress) {
	p.Addresses = val
}

func (p *UpdateUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserReq(%+v)", *p)
}

var fieldIDToName_UpdateUserReq = map[int16]string{
	1: "user_id",
	2: "name",
	3: "email",
	4: "password_hashed",
	5: "addresses",
}

type UpdateUserResp struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewUpdateUserResp() *UpdateUserResp {
	return &UpdateUserResp{}
}

func (p *UpdateUserResp) InitDefault() {
}

func (p *UpdateUserResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *UpdateUserResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *UpdateUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserResp(%+v)", *p)
}

var fieldIDToName_UpdateUserResp = map[int16]string{
	1: "success",
}

type RemoveUserReq struct {
	UserId int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
}

func NewRemoveUserReq() *RemoveUserReq {
	return &RemoveUserReq{}
}

func (p *RemoveUserReq) InitDefault() {
}

func (p *RemoveUserReq) GetUserId() (v int32) {
	return p.UserId
}
func (p *RemoveUserReq) SetUserId(val int32) {
	p.UserId = val
}

func (p *RemoveUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveUserReq(%+v)", *p)
}

var fieldIDToName_RemoveUserReq = map[int16]string{
	1: "user_id",
}

type RemoveUserResp struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewRemoveUserResp() *RemoveUserResp {
	return &RemoveUserResp{}
}

func (p *RemoveUserResp) InitDefault() {
}

func (p *RemoveUserResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *RemoveUserResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *RemoveUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveUserResp(%+v)", *p)
}

var fieldIDToName_RemoveUserResp = map[int16]string{
	1: "success",
}

type BlockUserReq struct {
	Identifier string `thrift:"identifier,1" frugal:"1,default,string" json:"identifier"`
	Reason     string `thrift:"reason,2" frugal:"2,default,string" json:"reason"`
	ExpiresAt  int64  `thrift:"expires_at,3" frugal:"3,default,i64" json:"expires_at"`
}

func NewBlockUserReq() *BlockUserReq {
	return &BlockUserReq{}
}

func (p *BlockUserReq) InitDefault() {
}

func (p *BlockUserReq) GetIdentifier() (v string) {
	return p.Identifier
}

func (p *BlockUserReq) GetReason() (v string) {
	return p.Reason
}

func (p *BlockUserReq) GetExpiresAt() (v int64) {
	return p.ExpiresAt
}
func (p *BlockUserReq) SetIdentifier(val string) {
	p.Identifier = val
}
func (p *BlockUserReq) SetReason(val string) {
	p.Reason = val
}
func (p *BlockUserReq) SetExpiresAt(val int64) {
	p.ExpiresAt = val
}

func (p *BlockUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockUserReq(%+v)", *p)
}

var fieldIDToName_BlockUserReq = map[int16]string{
	1: "identifier",
	2: "reason",
	3: "expires_at",
}

type BlockUserResp struct {
	BlockId string `thrift:"block_id,1" frugal:"1,default,string" json:"block_id"`
	Success bool   `thrift:"success,2" frugal:"2,default,bool" json:"success"`
}

func NewBlockUserResp() *BlockUserResp {
	return &BlockUserResp{}
}

func (p *BlockUserResp) InitDefault() {
}

func (p *BlockUserResp) GetBlockId() (v string) {
	return p.BlockId
}

func (p *BlockUserResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *BlockUserResp) SetBlockId(val string) {
	p.BlockId = val
}
func (p *BlockUserResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *BlockUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockUserResp(%+v)", *p)
}

var fieldIDToName_BlockUserResp = map[int16]string{
	1: "block_id",
	2: "success",
}

type UnblockUserReq struct {
	Identifier string `thrift:"identifier,1" frugal:"1,default,string" json:"identifier"`
}

func NewUnblockUserReq() *UnblockUserReq {
	return &UnblockUserReq{}
}

func (p *UnblockUserReq) InitDefault() {
}

func (p *UnblockUserReq) GetIdentifier() (v string) {
	return p.Identifier
}
func (p *UnblockUserReq) SetIdentifier(val string) {
	p.Identifier = val
}

func (p *UnblockUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnblockUserReq(%+v)", *p)
}

var fieldIDToName_UnblockUserReq = map[int16]string{
	1: "identifier",
}

type UnblockUserResp struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewUnblockUserResp() *UnblockUserResp {
	return &UnblockUserResp{}
}

func (p *UnblockUserResp) InitDefault() {
}

func (p *UnblockUserResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *UnblockUserResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *UnblockUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnblockUserResp(%+v)", *p)
}

var fieldIDToName_UnblockUserResp = map[int16]string{
	1: "success",
}

type UserService interface {
	Register(ctx context.Context, req *RegisterReq) (r *RegisterResp, err error)

	Login(ctx context.Context, req *LoginReq) (r *LoginResp, err error)

	GetUser(ctx context.Context, req *GetUserReq) (r *GetUserResp, err error)

	UpdateUser(ctx context.Context, req *UpdateUserReq) (r *UpdateUserResp, err error)

	RemoveUser(ctx context.Context, req *RemoveUserReq) (r *RemoveUserResp, err error)

	BlockUser(ctx context.Context, req *BlockUserReq) (r *BlockUserResp, err error)

	UnblockUser(ctx context.Context, req *UnblockUserReq) (r *UnblockUserResp, err error)

	AdminListUser(ctx context.Context, req *AdminListUserReq) (r *AdminListUserResp, err error)

	Seller(ctx context.Context, req *SellerReq) (r *SellerResp, err error)
}

type UserServiceRegisterArgs struct {
	Req *RegisterReq `thrift:"req,1" frugal:"1,default,RegisterReq" json:"req"`
}

func NewUserServiceRegisterArgs() *UserServiceRegisterArgs {
	return &UserServiceRegisterArgs{}
}

func (p *UserServiceRegisterArgs) InitDefault() {
}

var UserServiceRegisterArgs_Req_DEFAULT *RegisterReq

func (p *UserServiceRegisterArgs) GetReq() (v *RegisterReq) {
	if !p.IsSetReq() {
		return UserServiceRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceRegisterArgs) SetReq(val *RegisterReq) {
	p.Req = val
}

func (p *UserServiceRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterArgs(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterArgs = map[int16]string{
	1: "req",
}

type UserServiceRegisterResult struct {
	Success *RegisterResp `thrift:"success,0,optional" frugal:"0,optional,RegisterResp" json:"success,omitempty"`
}

func NewUserServiceRegisterResult() *UserServiceRegisterResult {
	return &UserServiceRegisterResult{}
}

func (p *UserServiceRegisterResult) InitDefault() {
}

var UserServiceRegisterResult_Success_DEFAULT *RegisterResp

func (p *UserServiceRegisterResult) GetSuccess() (v *RegisterResp) {
	if !p.IsSetSuccess() {
		return UserServiceRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterResp)
}

func (p *UserServiceRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterResult(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterResult = map[int16]string{
	0: "success",
}

type UserServiceLoginArgs struct {
	Req *LoginReq `thrift:"req,1" frugal:"1,default,LoginReq" json:"req"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
	return &UserServiceLoginArgs{}
}

func (p *UserServiceLoginArgs) InitDefault() {
}

var UserServiceLoginArgs_Req_DEFAULT *LoginReq

func (p *UserServiceLoginArgs) GetReq() (v *LoginReq) {
	if !p.IsSetReq() {
		return UserServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceLoginArgs) SetReq(val *LoginReq) {
	p.Req = val
}

func (p *UserServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

var fieldIDToName_UserServiceLoginArgs = map[int16]string{
	1: "req",
}

type UserServiceLoginResult struct {
	Success *LoginResp `thrift:"success,0,optional" frugal:"0,optional,LoginResp" json:"success,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
	return &UserServiceLoginResult{}
}

func (p *UserServiceLoginResult) InitDefault() {
}

var UserServiceLoginResult_Success_DEFAULT *LoginResp

func (p *UserServiceLoginResult) GetSuccess() (v *LoginResp) {
	if !p.IsSetSuccess() {
		return UserServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResp)
}

func (p *UserServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

var fieldIDToName_UserServiceLoginResult = map[int16]string{
	0: "success",
}

type UserServiceGetUserArgs struct {
	Req *GetUserReq `thrift:"req,1" frugal:"1,default,GetUserReq" json:"req"`
}

func NewUserServiceGetUserArgs() *UserServiceGetUserArgs {
	return &UserServiceGetUserArgs{}
}

func (p *UserServiceGetUserArgs) InitDefault() {
}

var UserServiceGetUserArgs_Req_DEFAULT *GetUserReq

func (p *UserServiceGetUserArgs) GetReq() (v *GetUserReq) {
	if !p.IsSetReq() {
		return UserServiceGetUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserArgs) SetReq(val *GetUserReq) {
	p.Req = val
}

func (p *UserServiceGetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserArgs = map[int16]string{
	1: "req",
}

type UserServiceGetUserResult struct {
	Success *GetUserResp `thrift:"success,0,optional" frugal:"0,optional,GetUserResp" json:"success,omitempty"`
}

func NewUserServiceGetUserResult() *UserServiceGetUserResult {
	return &UserServiceGetUserResult{}
}

func (p *UserServiceGetUserResult) InitDefault() {
}

var UserServiceGetUserResult_Success_DEFAULT *GetUserResp

func (p *UserServiceGetUserResult) GetSuccess() (v *GetUserResp) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserResp)
}

func (p *UserServiceGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserResult = map[int16]string{
	0: "success",
}

type UserServiceUpdateUserArgs struct {
	Req *UpdateUserReq `thrift:"req,1" frugal:"1,default,UpdateUserReq" json:"req"`
}

func NewUserServiceUpdateUserArgs() *UserServiceUpdateUserArgs {
	return &UserServiceUpdateUserArgs{}
}

func (p *UserServiceUpdateUserArgs) InitDefault() {
}

var UserServiceUpdateUserArgs_Req_DEFAULT *UpdateUserReq

func (p *UserServiceUpdateUserArgs) GetReq() (v *UpdateUserReq) {
	if !p.IsSetReq() {
		return UserServiceUpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateUserArgs) SetReq(val *UpdateUserReq) {
	p.Req = val
}

func (p *UserServiceUpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceUpdateUserArgs = map[int16]string{
	1: "req",
}

type UserServiceUpdateUserResult struct {
	Success *UpdateUserResp `thrift:"success,0,optional" frugal:"0,optional,UpdateUserResp" json:"success,omitempty"`
}

func NewUserServiceUpdateUserResult() *UserServiceUpdateUserResult {
	return &UserServiceUpdateUserResult{}
}

func (p *UserServiceUpdateUserResult) InitDefault() {
}

var UserServiceUpdateUserResult_Success_DEFAULT *UpdateUserResp

func (p *UserServiceUpdateUserResult) GetSuccess() (v *UpdateUserResp) {
	if !p.IsSetSuccess() {
		return UserServiceUpdateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateUserResp)
}

func (p *UserServiceUpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceUpdateUserResult = map[int16]string{
	0: "success",
}

type UserServiceRemoveUserArgs struct {
	Req *RemoveUserReq `thrift:"req,1" frugal:"1,default,RemoveUserReq" json:"req"`
}

func NewUserServiceRemoveUserArgs() *UserServiceRemoveUserArgs {
	return &UserServiceRemoveUserArgs{}
}

func (p *UserServiceRemoveUserArgs) InitDefault() {
}

var UserServiceRemoveUserArgs_Req_DEFAULT *RemoveUserReq

func (p *UserServiceRemoveUserArgs) GetReq() (v *RemoveUserReq) {
	if !p.IsSetReq() {
		return UserServiceRemoveUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceRemoveUserArgs) SetReq(val *RemoveUserReq) {
	p.Req = val
}

func (p *UserServiceRemoveUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceRemoveUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRemoveUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceRemoveUserArgs = map[int16]string{
	1: "req",
}

type UserServiceRemoveUserResult struct {
	Success *RemoveUserResp `thrift:"success,0,optional" frugal:"0,optional,RemoveUserResp" json:"success,omitempty"`
}

func NewUserServiceRemoveUserResult() *UserServiceRemoveUserResult {
	return &UserServiceRemoveUserResult{}
}

func (p *UserServiceRemoveUserResult) InitDefault() {
}

var UserServiceRemoveUserResult_Success_DEFAULT *RemoveUserResp

func (p *UserServiceRemoveUserResult) GetSuccess() (v *RemoveUserResp) {
	if !p.IsSetSuccess() {
		return UserServiceRemoveUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRemoveUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*RemoveUserResp)
}

func (p *UserServiceRemoveUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRemoveUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRemoveUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceRemoveUserResult = map[int16]string{
	0: "success",
}

type UserServiceBlockUserArgs struct {
	Req *BlockUserReq `thrift:"req,1" frugal:"1,default,BlockUserReq" json:"req"`
}

func NewUserServiceBlockUserArgs() *UserServiceBlockUserArgs {
	return &UserServiceBlockUserArgs{}
}

func (p *UserServiceBlockUserArgs) InitDefault() {
}

var UserServiceBlockUserArgs_Req_DEFAULT *BlockUserReq

func (p *UserServiceBlockUserArgs) GetReq() (v *BlockUserReq) {
	if !p.IsSetReq() {
		return UserServiceBlockUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceBlockUserArgs) SetReq(val *BlockUserReq) {
	p.Req = val
}

func (p *UserServiceBlockUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceBlockUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceBlockUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceBlockUserArgs = map[int16]string{
	1: "req",
}

type UserServiceBlockUserResult struct {
	Success *BlockUserResp `thrift:"success,0,optional" frugal:"0,optional,BlockUserResp" json:"success,omitempty"`
}

func NewUserServiceBlockUserResult() *UserServiceBlockUserResult {
	return &UserServiceBlockUserResult{}
}

func (p *UserServiceBlockUserResult) InitDefault() {
}

var UserServiceBlockUserResult_Success_DEFAULT *BlockUserResp

func (p *UserServiceBlockUserResult) GetSuccess() (v *BlockUserResp) {
	if !p.IsSetSuccess() {
		return UserServiceBlockUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceBlockUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*BlockUserResp)
}

func (p *UserServiceBlockUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceBlockUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceBlockUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceBlockUserResult = map[int16]string{
	0: "success",
}

type UserServiceUnblockUserArgs struct {
	Req *UnblockUserReq `thrift:"req,1" frugal:"1,default,UnblockUserReq" json:"req"`
}

func NewUserServiceUnblockUserArgs() *UserServiceUnblockUserArgs {
	return &UserServiceUnblockUserArgs{}
}

func (p *UserServiceUnblockUserArgs) InitDefault() {
}

var UserServiceUnblockUserArgs_Req_DEFAULT *UnblockUserReq

func (p *UserServiceUnblockUserArgs) GetReq() (v *UnblockUserReq) {
	if !p.IsSetReq() {
		return UserServiceUnblockUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUnblockUserArgs) SetReq(val *UnblockUserReq) {
	p.Req = val
}

func (p *UserServiceUnblockUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUnblockUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUnblockUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceUnblockUserArgs = map[int16]string{
	1: "req",
}

type UserServiceUnblockUserResult struct {
	Success *UnblockUserResp `thrift:"success,0,optional" frugal:"0,optional,UnblockUserResp" json:"success,omitempty"`
}

func NewUserServiceUnblockUserResult() *UserServiceUnblockUserResult {
	return &UserServiceUnblockUserResult{}
}

func (p *UserServiceUnblockUserResult) InitDefault() {
}

var UserServiceUnblockUserResult_Success_DEFAULT *UnblockUserResp

func (p *UserServiceUnblockUserResult) GetSuccess() (v *UnblockUserResp) {
	if !p.IsSetSuccess() {
		return UserServiceUnblockUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUnblockUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UnblockUserResp)
}

func (p *UserServiceUnblockUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUnblockUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUnblockUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceUnblockUserResult = map[int16]string{
	0: "success",
}

type UserServiceAdminListUserArgs struct {
	Req *AdminListUserReq `thrift:"req,1" frugal:"1,default,AdminListUserReq" json:"req"`
}

func NewUserServiceAdminListUserArgs() *UserServiceAdminListUserArgs {
	return &UserServiceAdminListUserArgs{}
}

func (p *UserServiceAdminListUserArgs) InitDefault() {
}

var UserServiceAdminListUserArgs_Req_DEFAULT *AdminListUserReq

func (p *UserServiceAdminListUserArgs) GetReq() (v *AdminListUserReq) {
	if !p.IsSetReq() {
		return UserServiceAdminListUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceAdminListUserArgs) SetReq(val *AdminListUserReq) {
	p.Req = val
}

func (p *UserServiceAdminListUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceAdminListUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceAdminListUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceAdminListUserArgs = map[int16]string{
	1: "req",
}

type UserServiceAdminListUserResult struct {
	Success *AdminListUserResp `thrift:"success,0,optional" frugal:"0,optional,AdminListUserResp" json:"success,omitempty"`
}

func NewUserServiceAdminListUserResult() *UserServiceAdminListUserResult {
	return &UserServiceAdminListUserResult{}
}

func (p *UserServiceAdminListUserResult) InitDefault() {
}

var UserServiceAdminListUserResult_Success_DEFAULT *AdminListUserResp

func (p *UserServiceAdminListUserResult) GetSuccess() (v *AdminListUserResp) {
	if !p.IsSetSuccess() {
		return UserServiceAdminListUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceAdminListUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*AdminListUserResp)
}

func (p *UserServiceAdminListUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceAdminListUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceAdminListUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceAdminListUserResult = map[int16]string{
	0: "success",
}

type UserServiceSellerArgs struct {
	Req *SellerReq `thrift:"req,1" frugal:"1,default,SellerReq" json:"req"`
}

func NewUserServiceSellerArgs() *UserServiceSellerArgs {
	return &UserServiceSellerArgs{}
}

func (p *UserServiceSellerArgs) InitDefault() {
}

var UserServiceSellerArgs_Req_DEFAULT *SellerReq

func (p *UserServiceSellerArgs) GetReq() (v *SellerReq) {
	if !p.IsSetReq() {
		return UserServiceSellerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceSellerArgs) SetReq(val *SellerReq) {
	p.Req = val
}

func (p *UserServiceSellerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceSellerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceSellerArgs(%+v)", *p)
}

var fieldIDToName_UserServiceSellerArgs = map[int16]string{
	1: "req",
}

type UserServiceSellerResult struct {
	Success *SellerResp `thrift:"success,0,optional" frugal:"0,optional,SellerResp" json:"success,omitempty"`
}

func NewUserServiceSellerResult() *UserServiceSellerResult {
	return &UserServiceSellerResult{}
}

func (p *UserServiceSellerResult) InitDefault() {
}

var UserServiceSellerResult_Success_DEFAULT *SellerResp

func (p *UserServiceSellerResult) GetSuccess() (v *SellerResp) {
	if !p.IsSetSuccess() {
		return UserServiceSellerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceSellerResult) SetSuccess(x interface{}) {
	p.Success = x.(*SellerResp)
}

func (p *UserServiceSellerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceSellerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceSellerResult(%+v)", *p)
}

var fieldIDToName_UserServiceSellerResult = map[int16]string{
	0: "success",
}
