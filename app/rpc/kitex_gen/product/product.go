// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package product

import (
	"context"
	"fmt"
)

type Product struct {
	Id          int32   `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	Name        string  `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Price       float64 `thrift:"price,3" frugal:"3,default,double" json:"price"`
	Stock       int32   `thrift:"stock,4" frugal:"4,default,i32" json:"stock"`
	Image       string  `thrift:"image,5" frugal:"5,default,string" json:"image"`
	Description string  `thrift:"description,6" frugal:"6,default,string" json:"description"`
	CreatedAt   string  `thrift:"created_at,7" frugal:"7,default,string" json:"created_at"`
	IsDeleted   bool    `thrift:"is_deleted,8" frugal:"8,default,bool" json:"is_deleted"`
}

func NewProduct() *Product {
	return &Product{}
}

func (p *Product) InitDefault() {
}

func (p *Product) GetId() (v int32) {
	return p.Id
}

func (p *Product) GetName() (v string) {
	return p.Name
}

func (p *Product) GetPrice() (v float64) {
	return p.Price
}

func (p *Product) GetStock() (v int32) {
	return p.Stock
}

func (p *Product) GetImage() (v string) {
	return p.Image
}

func (p *Product) GetDescription() (v string) {
	return p.Description
}

func (p *Product) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Product) GetIsDeleted() (v bool) {
	return p.IsDeleted
}
func (p *Product) SetId(val int32) {
	p.Id = val
}
func (p *Product) SetName(val string) {
	p.Name = val
}
func (p *Product) SetPrice(val float64) {
	p.Price = val
}
func (p *Product) SetStock(val int32) {
	p.Stock = val
}
func (p *Product) SetImage(val string) {
	p.Image = val
}
func (p *Product) SetDescription(val string) {
	p.Description = val
}
func (p *Product) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Product) SetIsDeleted(val bool) {
	p.IsDeleted = val
}

func (p *Product) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Product(%+v)", *p)
}

var fieldIDToName_Product = map[int16]string{
	1: "id",
	2: "name",
	3: "price",
	4: "stock",
	5: "image",
	6: "description",
	7: "created_at",
	8: "is_deleted",
}

type ProductReview struct {
	Id        int32  `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	ProductId int32  `thrift:"product_id,2" frugal:"2,default,i32" json:"product_id"`
	UserId    int32  `thrift:"user_id,3" frugal:"3,default,i32" json:"user_id"`
	UserName  string `thrift:"user_name,4" frugal:"4,default,string" json:"user_name"`
	Rating    int32  `thrift:"rating,5" frugal:"5,default,i32" json:"rating"`
	Comment   string `thrift:"comment,6" frugal:"6,default,string" json:"comment"`
	CreatedAt string `thrift:"created_at,7" frugal:"7,default,string" json:"created_at"`
}

func NewProductReview() *ProductReview {
	return &ProductReview{}
}

func (p *ProductReview) InitDefault() {
}

func (p *ProductReview) GetId() (v int32) {
	return p.Id
}

func (p *ProductReview) GetProductId() (v int32) {
	return p.ProductId
}

func (p *ProductReview) GetUserId() (v int32) {
	return p.UserId
}

func (p *ProductReview) GetUserName() (v string) {
	return p.UserName
}

func (p *ProductReview) GetRating() (v int32) {
	return p.Rating
}

func (p *ProductReview) GetComment() (v string) {
	return p.Comment
}

func (p *ProductReview) GetCreatedAt() (v string) {
	return p.CreatedAt
}
func (p *ProductReview) SetId(val int32) {
	p.Id = val
}
func (p *ProductReview) SetProductId(val int32) {
	p.ProductId = val
}
func (p *ProductReview) SetUserId(val int32) {
	p.UserId = val
}
func (p *ProductReview) SetUserName(val string) {
	p.UserName = val
}
func (p *ProductReview) SetRating(val int32) {
	p.Rating = val
}
func (p *ProductReview) SetComment(val string) {
	p.Comment = val
}
func (p *ProductReview) SetCreatedAt(val string) {
	p.CreatedAt = val
}

func (p *ProductReview) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductReview(%+v)", *p)
}

var fieldIDToName_ProductReview = map[int16]string{
	1: "id",
	2: "product_id",
	3: "user_id",
	4: "user_name",
	5: "rating",
	6: "comment",
	7: "created_at",
}

type Promotion struct {
	Id           string `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Type         string `thrift:"type,2" frugal:"2,default,string" json:"type"`
	ProductId    string `thrift:"product_id,3" frugal:"3,default,string" json:"product_id"`
	DiscountRate string `thrift:"discount_rate,4" frugal:"4,default,string" json:"discount_rate"`
	CouponCode   string `thrift:"coupon_code,5" frugal:"5,default,string" json:"coupon_code"`
	CouponType   string `thrift:"coupon_type,6" frugal:"6,default,string" json:"coupon_type"`
	CouponValue  string `thrift:"coupon_value,7" frugal:"7,default,string" json:"coupon_value"`
	MinPurchase  string `thrift:"min_purchase,8" frugal:"8,default,string" json:"min_purchase"`
	UsageLimit   string `thrift:"usage_limit,9" frugal:"9,default,string" json:"usage_limit"`
	StartDate    string `thrift:"start_date,10" frugal:"10,default,string" json:"start_date"`
	EndDate      string `thrift:"end_date,11" frugal:"11,default,string" json:"end_date"`
}

func NewPromotion() *Promotion {
	return &Promotion{}
}

func (p *Promotion) InitDefault() {
}

func (p *Promotion) GetId() (v string) {
	return p.Id
}

func (p *Promotion) GetType() (v string) {
	return p.Type
}

func (p *Promotion) GetProductId() (v string) {
	return p.ProductId
}

func (p *Promotion) GetDiscountRate() (v string) {
	return p.DiscountRate
}

func (p *Promotion) GetCouponCode() (v string) {
	return p.CouponCode
}

func (p *Promotion) GetCouponType() (v string) {
	return p.CouponType
}

func (p *Promotion) GetCouponValue() (v string) {
	return p.CouponValue
}

func (p *Promotion) GetMinPurchase() (v string) {
	return p.MinPurchase
}

func (p *Promotion) GetUsageLimit() (v string) {
	return p.UsageLimit
}

func (p *Promotion) GetStartDate() (v string) {
	return p.StartDate
}

func (p *Promotion) GetEndDate() (v string) {
	return p.EndDate
}
func (p *Promotion) SetId(val string) {
	p.Id = val
}
func (p *Promotion) SetType(val string) {
	p.Type = val
}
func (p *Promotion) SetProductId(val string) {
	p.ProductId = val
}
func (p *Promotion) SetDiscountRate(val string) {
	p.DiscountRate = val
}
func (p *Promotion) SetCouponCode(val string) {
	p.CouponCode = val
}
func (p *Promotion) SetCouponType(val string) {
	p.CouponType = val
}
func (p *Promotion) SetCouponValue(val string) {
	p.CouponValue = val
}
func (p *Promotion) SetMinPurchase(val string) {
	p.MinPurchase = val
}
func (p *Promotion) SetUsageLimit(val string) {
	p.UsageLimit = val
}
func (p *Promotion) SetStartDate(val string) {
	p.StartDate = val
}
func (p *Promotion) SetEndDate(val string) {
	p.EndDate = val
}

func (p *Promotion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Promotion(%+v)", *p)
}

var fieldIDToName_Promotion = map[int16]string{
	1:  "id",
	2:  "type",
	3:  "product_id",
	4:  "discount_rate",
	5:  "coupon_code",
	6:  "coupon_type",
	7:  "coupon_value",
	8:  "min_purchase",
	9:  "usage_limit",
	10: "start_date",
	11: "end_date",
}

type GetActivePromotionsResp struct {
	Promotions []*Promotion `thrift:"promotions,1" frugal:"1,default,list<Promotion>" json:"promotions"`
}

func NewGetActivePromotionsResp() *GetActivePromotionsResp {
	return &GetActivePromotionsResp{}
}

func (p *GetActivePromotionsResp) InitDefault() {
}

func (p *GetActivePromotionsResp) GetPromotions() (v []*Promotion) {
	return p.Promotions
}
func (p *GetActivePromotionsResp) SetPromotions(val []*Promotion) {
	p.Promotions = val
}

func (p *GetActivePromotionsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivePromotionsResp(%+v)", *p)
}

var fieldIDToName_GetActivePromotionsResp = map[int16]string{
	1: "promotions",
}

type DeletePromotionReq struct {
	Id int32 `thrift:"id,1" frugal:"1,default,i32" json:"id"`
}

func NewDeletePromotionReq() *DeletePromotionReq {
	return &DeletePromotionReq{}
}

func (p *DeletePromotionReq) InitDefault() {
}

func (p *DeletePromotionReq) GetId() (v int32) {
	return p.Id
}
func (p *DeletePromotionReq) SetId(val int32) {
	p.Id = val
}

func (p *DeletePromotionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePromotionReq(%+v)", *p)
}

var fieldIDToName_DeletePromotionReq = map[int16]string{
	1: "id",
}

type DeletePromotionResp struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewDeletePromotionResp() *DeletePromotionResp {
	return &DeletePromotionResp{}
}

func (p *DeletePromotionResp) InitDefault() {
}

func (p *DeletePromotionResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *DeletePromotionResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *DeletePromotionResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePromotionResp(%+v)", *p)
}

var fieldIDToName_DeletePromotionResp = map[int16]string{
	1: "success",
}

type GetProductReviewsReq struct {
	ProductId int32 `thrift:"product_id,1" frugal:"1,default,i32" json:"product_id"`
}

func NewGetProductReviewsReq() *GetProductReviewsReq {
	return &GetProductReviewsReq{}
}

func (p *GetProductReviewsReq) InitDefault() {
}

func (p *GetProductReviewsReq) GetProductId() (v int32) {
	return p.ProductId
}
func (p *GetProductReviewsReq) SetProductId(val int32) {
	p.ProductId = val
}

func (p *GetProductReviewsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductReviewsReq(%+v)", *p)
}

var fieldIDToName_GetProductReviewsReq = map[int16]string{
	1: "product_id",
}

type GetProductReviewsResp struct {
	Reviews []*ProductReview `thrift:"Reviews,1" frugal:"1,default,list<ProductReview>" json:"Reviews"`
}

func NewGetProductReviewsResp() *GetProductReviewsResp {
	return &GetProductReviewsResp{}
}

func (p *GetProductReviewsResp) InitDefault() {
}

func (p *GetProductReviewsResp) GetReviews() (v []*ProductReview) {
	return p.Reviews
}
func (p *GetProductReviewsResp) SetReviews(val []*ProductReview) {
	p.Reviews = val
}

func (p *GetProductReviewsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductReviewsResp(%+v)", *p)
}

var fieldIDToName_GetProductReviewsResp = map[int16]string{
	1: "Reviews",
}

type CreateProductReq struct {
	Name        string  `thrift:"name,1" frugal:"1,default,string" json:"name"`
	Description string  `thrift:"description,2" frugal:"2,default,string" json:"description"`
	Price       float64 `thrift:"price,3" frugal:"3,default,double" json:"price"`
	Stock       int32   `thrift:"stock,4" frugal:"4,default,i32" json:"stock"`
	Image       string  `thrift:"image,5" frugal:"5,default,string" json:"image"`
}

func NewCreateProductReq() *CreateProductReq {
	return &CreateProductReq{}
}

func (p *CreateProductReq) InitDefault() {
}

func (p *CreateProductReq) GetName() (v string) {
	return p.Name
}

func (p *CreateProductReq) GetDescription() (v string) {
	return p.Description
}

func (p *CreateProductReq) GetPrice() (v float64) {
	return p.Price
}

func (p *CreateProductReq) GetStock() (v int32) {
	return p.Stock
}

func (p *CreateProductReq) GetImage() (v string) {
	return p.Image
}
func (p *CreateProductReq) SetName(val string) {
	p.Name = val
}
func (p *CreateProductReq) SetDescription(val string) {
	p.Description = val
}
func (p *CreateProductReq) SetPrice(val float64) {
	p.Price = val
}
func (p *CreateProductReq) SetStock(val int32) {
	p.Stock = val
}
func (p *CreateProductReq) SetImage(val string) {
	p.Image = val
}

func (p *CreateProductReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateProductReq(%+v)", *p)
}

var fieldIDToName_CreateProductReq = map[int16]string{
	1: "name",
	2: "description",
	3: "price",
	4: "stock",
	5: "image",
}

type CreateProductResp struct {
	Product *Product `thrift:"product,1" frugal:"1,default,Product" json:"product"`
}

func NewCreateProductResp() *CreateProductResp {
	return &CreateProductResp{}
}

func (p *CreateProductResp) InitDefault() {
}

var CreateProductResp_Product_DEFAULT *Product

func (p *CreateProductResp) GetProduct() (v *Product) {
	if !p.IsSetProduct() {
		return CreateProductResp_Product_DEFAULT
	}
	return p.Product
}
func (p *CreateProductResp) SetProduct(val *Product) {
	p.Product = val
}

func (p *CreateProductResp) IsSetProduct() bool {
	return p.Product != nil
}

func (p *CreateProductResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateProductResp(%+v)", *p)
}

var fieldIDToName_CreateProductResp = map[int16]string{
	1: "product",
}

type UpdateProductReq struct {
	Id          int32   `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	Name        string  `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Description string  `thrift:"description,3" frugal:"3,default,string" json:"description"`
	Price       float64 `thrift:"price,4" frugal:"4,default,double" json:"price"`
	Stock       int32   `thrift:"stock,5" frugal:"5,default,i32" json:"stock"`
	Image       string  `thrift:"image,6" frugal:"6,default,string" json:"image"`
}

func NewUpdateProductReq() *UpdateProductReq {
	return &UpdateProductReq{}
}

func (p *UpdateProductReq) InitDefault() {
}

func (p *UpdateProductReq) GetId() (v int32) {
	return p.Id
}

func (p *UpdateProductReq) GetName() (v string) {
	return p.Name
}

func (p *UpdateProductReq) GetDescription() (v string) {
	return p.Description
}

func (p *UpdateProductReq) GetPrice() (v float64) {
	return p.Price
}

func (p *UpdateProductReq) GetStock() (v int32) {
	return p.Stock
}

func (p *UpdateProductReq) GetImage() (v string) {
	return p.Image
}
func (p *UpdateProductReq) SetId(val int32) {
	p.Id = val
}
func (p *UpdateProductReq) SetName(val string) {
	p.Name = val
}
func (p *UpdateProductReq) SetDescription(val string) {
	p.Description = val
}
func (p *UpdateProductReq) SetPrice(val float64) {
	p.Price = val
}
func (p *UpdateProductReq) SetStock(val int32) {
	p.Stock = val
}
func (p *UpdateProductReq) SetImage(val string) {
	p.Image = val
}

func (p *UpdateProductReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateProductReq(%+v)", *p)
}

var fieldIDToName_UpdateProductReq = map[int16]string{
	1: "id",
	2: "name",
	3: "description",
	4: "price",
	5: "stock",
	6: "image",
}

type UpdateProductResp struct {
	Product *Product `thrift:"product,1" frugal:"1,default,Product" json:"product"`
}

func NewUpdateProductResp() *UpdateProductResp {
	return &UpdateProductResp{}
}

func (p *UpdateProductResp) InitDefault() {
}

var UpdateProductResp_Product_DEFAULT *Product

func (p *UpdateProductResp) GetProduct() (v *Product) {
	if !p.IsSetProduct() {
		return UpdateProductResp_Product_DEFAULT
	}
	return p.Product
}
func (p *UpdateProductResp) SetProduct(val *Product) {
	p.Product = val
}

func (p *UpdateProductResp) IsSetProduct() bool {
	return p.Product != nil
}

func (p *UpdateProductResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateProductResp(%+v)", *p)
}

var fieldIDToName_UpdateProductResp = map[int16]string{
	1: "product",
}

type RemoveProductReq struct {
	Id int32 `thrift:"id,1" frugal:"1,default,i32" json:"id"`
}

func NewRemoveProductReq() *RemoveProductReq {
	return &RemoveProductReq{}
}

func (p *RemoveProductReq) InitDefault() {
}

func (p *RemoveProductReq) GetId() (v int32) {
	return p.Id
}
func (p *RemoveProductReq) SetId(val int32) {
	p.Id = val
}

func (p *RemoveProductReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveProductReq(%+v)", *p)
}

var fieldIDToName_RemoveProductReq = map[int16]string{
	1: "id",
}

type RemoveProductResp struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewRemoveProductResp() *RemoveProductResp {
	return &RemoveProductResp{}
}

func (p *RemoveProductResp) InitDefault() {
}

func (p *RemoveProductResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *RemoveProductResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *RemoveProductResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveProductResp(%+v)", *p)
}

var fieldIDToName_RemoveProductResp = map[int16]string{
	1: "success",
}

type GetProductByIDReq struct {
	Id int32 `thrift:"id,1" frugal:"1,default,i32" json:"id"`
}

func NewGetProductByIDReq() *GetProductByIDReq {
	return &GetProductByIDReq{}
}

func (p *GetProductByIDReq) InitDefault() {
}

func (p *GetProductByIDReq) GetId() (v int32) {
	return p.Id
}
func (p *GetProductByIDReq) SetId(val int32) {
	p.Id = val
}

func (p *GetProductByIDReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductByIDReq(%+v)", *p)
}

var fieldIDToName_GetProductByIDReq = map[int16]string{
	1: "id",
}

type GetProductByIDResp struct {
	Product *Product `thrift:"product,1" frugal:"1,default,Product" json:"product"`
}

func NewGetProductByIDResp() *GetProductByIDResp {
	return &GetProductByIDResp{}
}

func (p *GetProductByIDResp) InitDefault() {
}

var GetProductByIDResp_Product_DEFAULT *Product

func (p *GetProductByIDResp) GetProduct() (v *Product) {
	if !p.IsSetProduct() {
		return GetProductByIDResp_Product_DEFAULT
	}
	return p.Product
}
func (p *GetProductByIDResp) SetProduct(val *Product) {
	p.Product = val
}

func (p *GetProductByIDResp) IsSetProduct() bool {
	return p.Product != nil
}

func (p *GetProductByIDResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductByIDResp(%+v)", *p)
}

var fieldIDToName_GetProductByIDResp = map[int16]string{
	1: "product",
}

type SearchProductsReq struct {
	Query    string  `thrift:"query,1" frugal:"1,default,string" json:"query"`
	Category string  `thrift:"category,2" frugal:"2,default,string" json:"category"`
	PageNum  int32   `thrift:"page_num,3" frugal:"3,default,i32" json:"page_num"`
	PageSize int32   `thrift:"page_size,4" frugal:"4,default,i32" json:"page_size"`
	MinPrice *int64  `thrift:"min_price,5,optional" frugal:"5,optional,i64" json:"min_price,omitempty"`
	MaxPrice *int64  `thrift:"max_price,6,optional" frugal:"6,optional,i64" json:"max_price,omitempty"`
	Brand    *string `thrift:"brand,7,optional" frugal:"7,optional,string" json:"brand,omitempty"`
}

func NewSearchProductsReq() *SearchProductsReq {
	return &SearchProductsReq{}
}

func (p *SearchProductsReq) InitDefault() {
}

func (p *SearchProductsReq) GetQuery() (v string) {
	return p.Query
}

func (p *SearchProductsReq) GetCategory() (v string) {
	return p.Category
}

func (p *SearchProductsReq) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *SearchProductsReq) GetPageSize() (v int32) {
	return p.PageSize
}

var SearchProductsReq_MinPrice_DEFAULT int64

func (p *SearchProductsReq) GetMinPrice() (v int64) {
	if !p.IsSetMinPrice() {
		return SearchProductsReq_MinPrice_DEFAULT
	}
	return *p.MinPrice
}

var SearchProductsReq_MaxPrice_DEFAULT int64

func (p *SearchProductsReq) GetMaxPrice() (v int64) {
	if !p.IsSetMaxPrice() {
		return SearchProductsReq_MaxPrice_DEFAULT
	}
	return *p.MaxPrice
}

var SearchProductsReq_Brand_DEFAULT string

func (p *SearchProductsReq) GetBrand() (v string) {
	if !p.IsSetBrand() {
		return SearchProductsReq_Brand_DEFAULT
	}
	return *p.Brand
}
func (p *SearchProductsReq) SetQuery(val string) {
	p.Query = val
}
func (p *SearchProductsReq) SetCategory(val string) {
	p.Category = val
}
func (p *SearchProductsReq) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *SearchProductsReq) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *SearchProductsReq) SetMinPrice(val *int64) {
	p.MinPrice = val
}
func (p *SearchProductsReq) SetMaxPrice(val *int64) {
	p.MaxPrice = val
}
func (p *SearchProductsReq) SetBrand(val *string) {
	p.Brand = val
}

func (p *SearchProductsReq) IsSetMinPrice() bool {
	return p.MinPrice != nil
}

func (p *SearchProductsReq) IsSetMaxPrice() bool {
	return p.MaxPrice != nil
}

func (p *SearchProductsReq) IsSetBrand() bool {
	return p.Brand != nil
}

func (p *SearchProductsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchProductsReq(%+v)", *p)
}

var fieldIDToName_SearchProductsReq = map[int16]string{
	1: "query",
	2: "category",
	3: "page_num",
	4: "page_size",
	5: "min_price",
	6: "max_price",
	7: "brand",
}

type SearchProductsResp struct {
	Products   []*Product `thrift:"products,1" frugal:"1,default,list<Product>" json:"products"`
	TotalCount int64      `thrift:"total_count,2" frugal:"2,default,i64" json:"total_count"`
}

func NewSearchProductsResp() *SearchProductsResp {
	return &SearchProductsResp{}
}

func (p *SearchProductsResp) InitDefault() {
}

func (p *SearchProductsResp) GetProducts() (v []*Product) {
	return p.Products
}

func (p *SearchProductsResp) GetTotalCount() (v int64) {
	return p.TotalCount
}
func (p *SearchProductsResp) SetProducts(val []*Product) {
	p.Products = val
}
func (p *SearchProductsResp) SetTotalCount(val int64) {
	p.TotalCount = val
}

func (p *SearchProductsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchProductsResp(%+v)", *p)
}

var fieldIDToName_SearchProductsResp = map[int16]string{
	1: "products",
	2: "total_count",
}

type ListProductReq struct {
	PageNum  int32 `thrift:"page_num,1" frugal:"1,default,i32" json:"page_num"`
	PageSize int32 `thrift:"page_size,2" frugal:"2,default,i32" json:"page_size"`
}

func NewListProductReq() *ListProductReq {
	return &ListProductReq{}
}

func (p *ListProductReq) InitDefault() {
}

func (p *ListProductReq) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *ListProductReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *ListProductReq) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *ListProductReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *ListProductReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListProductReq(%+v)", *p)
}

var fieldIDToName_ListProductReq = map[int16]string{
	1: "page_num",
	2: "page_size",
}

type ListProductResp struct {
	Products   []*Product `thrift:"products,1" frugal:"1,default,list<Product>" json:"products"`
	Success    bool       `thrift:"success,2" frugal:"2,default,bool" json:"success"`
	TotalCount int64      `thrift:"total_count,3" frugal:"3,default,i64" json:"total_count"`
}

func NewListProductResp() *ListProductResp {
	return &ListProductResp{}
}

func (p *ListProductResp) InitDefault() {
}

func (p *ListProductResp) GetProducts() (v []*Product) {
	return p.Products
}

func (p *ListProductResp) GetSuccess() (v bool) {
	return p.Success
}

func (p *ListProductResp) GetTotalCount() (v int64) {
	return p.TotalCount
}
func (p *ListProductResp) SetProducts(val []*Product) {
	p.Products = val
}
func (p *ListProductResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *ListProductResp) SetTotalCount(val int64) {
	p.TotalCount = val
}

func (p *ListProductResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListProductResp(%+v)", *p)
}

var fieldIDToName_ListProductResp = map[int16]string{
	1: "products",
	2: "success",
	3: "total_count",
}

type CreateProductReviewReq struct {
	ProductId int32  `thrift:"product_id,1" frugal:"1,default,i32" json:"product_id"`
	UserId    int32  `thrift:"user_id,2" frugal:"2,default,i32" json:"user_id"`
	UserName  string `thrift:"user_name,3" frugal:"3,default,string" json:"user_name"`
	Rating    int32  `thrift:"rating,4" frugal:"4,default,i32" json:"rating"`
	Comment   string `thrift:"comment,5" frugal:"5,default,string" json:"comment"`
}

func NewCreateProductReviewReq() *CreateProductReviewReq {
	return &CreateProductReviewReq{}
}

func (p *CreateProductReviewReq) InitDefault() {
}

func (p *CreateProductReviewReq) GetProductId() (v int32) {
	return p.ProductId
}

func (p *CreateProductReviewReq) GetUserId() (v int32) {
	return p.UserId
}

func (p *CreateProductReviewReq) GetUserName() (v string) {
	return p.UserName
}

func (p *CreateProductReviewReq) GetRating() (v int32) {
	return p.Rating
}

func (p *CreateProductReviewReq) GetComment() (v string) {
	return p.Comment
}
func (p *CreateProductReviewReq) SetProductId(val int32) {
	p.ProductId = val
}
func (p *CreateProductReviewReq) SetUserId(val int32) {
	p.UserId = val
}
func (p *CreateProductReviewReq) SetUserName(val string) {
	p.UserName = val
}
func (p *CreateProductReviewReq) SetRating(val int32) {
	p.Rating = val
}
func (p *CreateProductReviewReq) SetComment(val string) {
	p.Comment = val
}

func (p *CreateProductReviewReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateProductReviewReq(%+v)", *p)
}

var fieldIDToName_CreateProductReviewReq = map[int16]string{
	1: "product_id",
	2: "user_id",
	3: "user_name",
	4: "rating",
	5: "comment",
}

type CreateProductReviewResp struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewCreateProductReviewResp() *CreateProductReviewResp {
	return &CreateProductReviewResp{}
}

func (p *CreateProductReviewResp) InitDefault() {
}

func (p *CreateProductReviewResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *CreateProductReviewResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *CreateProductReviewResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateProductReviewResp(%+v)", *p)
}

var fieldIDToName_CreateProductReviewResp = map[int16]string{
	1: "success",
}

type CreatePromotionReq struct {
	Type         string  `thrift:"type,1" frugal:"1,default,string" json:"type"`
	ProductId    int32   `thrift:"product_id,2" frugal:"2,default,i32" json:"product_id"`
	DiscountRate float64 `thrift:"discount_rate,3" frugal:"3,default,double" json:"discount_rate"`
	CouponCode   string  `thrift:"coupon_code,4" frugal:"4,default,string" json:"coupon_code"`
	CouponType   string  `thrift:"coupon_type,5" frugal:"5,default,string" json:"coupon_type"`
	CouponValue  float64 `thrift:"coupon_value,6" frugal:"6,default,double" json:"coupon_value"`
	MinPurchase  float64 `thrift:"min_purchase,7" frugal:"7,default,double" json:"min_purchase"`
	UsageLimit   int32   `thrift:"usage_limit,8" frugal:"8,default,i32" json:"usage_limit"`
	StartDate    string  `thrift:"start_date,9" frugal:"9,default,string" json:"start_date"`
	EndDate      string  `thrift:"end_date,10" frugal:"10,default,string" json:"end_date"`
}

func NewCreatePromotionReq() *CreatePromotionReq {
	return &CreatePromotionReq{}
}

func (p *CreatePromotionReq) InitDefault() {
}

func (p *CreatePromotionReq) GetType() (v string) {
	return p.Type
}

func (p *CreatePromotionReq) GetProductId() (v int32) {
	return p.ProductId
}

func (p *CreatePromotionReq) GetDiscountRate() (v float64) {
	return p.DiscountRate
}

func (p *CreatePromotionReq) GetCouponCode() (v string) {
	return p.CouponCode
}

func (p *CreatePromotionReq) GetCouponType() (v string) {
	return p.CouponType
}

func (p *CreatePromotionReq) GetCouponValue() (v float64) {
	return p.CouponValue
}

func (p *CreatePromotionReq) GetMinPurchase() (v float64) {
	return p.MinPurchase
}

func (p *CreatePromotionReq) GetUsageLimit() (v int32) {
	return p.UsageLimit
}

func (p *CreatePromotionReq) GetStartDate() (v string) {
	return p.StartDate
}

func (p *CreatePromotionReq) GetEndDate() (v string) {
	return p.EndDate
}
func (p *CreatePromotionReq) SetType(val string) {
	p.Type = val
}
func (p *CreatePromotionReq) SetProductId(val int32) {
	p.ProductId = val
}
func (p *CreatePromotionReq) SetDiscountRate(val float64) {
	p.DiscountRate = val
}
func (p *CreatePromotionReq) SetCouponCode(val string) {
	p.CouponCode = val
}
func (p *CreatePromotionReq) SetCouponType(val string) {
	p.CouponType = val
}
func (p *CreatePromotionReq) SetCouponValue(val float64) {
	p.CouponValue = val
}
func (p *CreatePromotionReq) SetMinPurchase(val float64) {
	p.MinPurchase = val
}
func (p *CreatePromotionReq) SetUsageLimit(val int32) {
	p.UsageLimit = val
}
func (p *CreatePromotionReq) SetStartDate(val string) {
	p.StartDate = val
}
func (p *CreatePromotionReq) SetEndDate(val string) {
	p.EndDate = val
}

func (p *CreatePromotionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePromotionReq(%+v)", *p)
}

var fieldIDToName_CreatePromotionReq = map[int16]string{
	1:  "type",
	2:  "product_id",
	3:  "discount_rate",
	4:  "coupon_code",
	5:  "coupon_type",
	6:  "coupon_value",
	7:  "min_purchase",
	8:  "usage_limit",
	9:  "start_date",
	10: "end_date",
}

type CreatePromotionResp struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewCreatePromotionResp() *CreatePromotionResp {
	return &CreatePromotionResp{}
}

func (p *CreatePromotionResp) InitDefault() {
}

func (p *CreatePromotionResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *CreatePromotionResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *CreatePromotionResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePromotionResp(%+v)", *p)
}

var fieldIDToName_CreatePromotionResp = map[int16]string{
	1: "success",
}

type ProductService interface {
	CreateProduct(ctx context.Context, req *CreateProductReq) (r *CreateProductResp, err error)

	UpdateProduct(ctx context.Context, req *UpdateProductReq) (r *UpdateProductResp, err error)

	RemoveProduct(ctx context.Context, req *RemoveProductReq) (r *RemoveProductResp, err error)

	GetProductByID(ctx context.Context, req *GetProductByIDReq) (r *GetProductByIDResp, err error)

	ListProduct(ctx context.Context) (r *ListProductResp, err error)

	AdminListProduct(ctx context.Context, req *ListProductReq) (r *ListProductResp, err error)

	SearchProducts(ctx context.Context, req *SearchProductsReq) (r *SearchProductsResp, err error)

	CreateProductReview(ctx context.Context, req *CreateProductReviewReq) (r *CreateProductReviewResp, err error)

	GetProductReviews(ctx context.Context, req *GetProductReviewsReq) (r *GetProductReviewsResp, err error)

	CreatePromotion(ctx context.Context, req *CreatePromotionReq) (r *CreatePromotionResp, err error)

	GetActivePromotions(ctx context.Context) (r *GetActivePromotionsResp, err error)

	DeletePromotion(ctx context.Context, req *DeletePromotionReq) (r *DeletePromotionResp, err error)
}

type ProductServiceCreateProductArgs struct {
	Req *CreateProductReq `thrift:"req,1" frugal:"1,default,CreateProductReq" json:"req"`
}

func NewProductServiceCreateProductArgs() *ProductServiceCreateProductArgs {
	return &ProductServiceCreateProductArgs{}
}

func (p *ProductServiceCreateProductArgs) InitDefault() {
}

var ProductServiceCreateProductArgs_Req_DEFAULT *CreateProductReq

func (p *ProductServiceCreateProductArgs) GetReq() (v *CreateProductReq) {
	if !p.IsSetReq() {
		return ProductServiceCreateProductArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceCreateProductArgs) SetReq(val *CreateProductReq) {
	p.Req = val
}

func (p *ProductServiceCreateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceCreateProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceCreateProductArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceCreateProductArgs = map[int16]string{
	1: "req",
}

type ProductServiceCreateProductResult struct {
	Success *CreateProductResp `thrift:"success,0,optional" frugal:"0,optional,CreateProductResp" json:"success,omitempty"`
}

func NewProductServiceCreateProductResult() *ProductServiceCreateProductResult {
	return &ProductServiceCreateProductResult{}
}

func (p *ProductServiceCreateProductResult) InitDefault() {
}

var ProductServiceCreateProductResult_Success_DEFAULT *CreateProductResp

func (p *ProductServiceCreateProductResult) GetSuccess() (v *CreateProductResp) {
	if !p.IsSetSuccess() {
		return ProductServiceCreateProductResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceCreateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateProductResp)
}

func (p *ProductServiceCreateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceCreateProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceCreateProductResult(%+v)", *p)
}

var fieldIDToName_ProductServiceCreateProductResult = map[int16]string{
	0: "success",
}

type ProductServiceUpdateProductArgs struct {
	Req *UpdateProductReq `thrift:"req,1" frugal:"1,default,UpdateProductReq" json:"req"`
}

func NewProductServiceUpdateProductArgs() *ProductServiceUpdateProductArgs {
	return &ProductServiceUpdateProductArgs{}
}

func (p *ProductServiceUpdateProductArgs) InitDefault() {
}

var ProductServiceUpdateProductArgs_Req_DEFAULT *UpdateProductReq

func (p *ProductServiceUpdateProductArgs) GetReq() (v *UpdateProductReq) {
	if !p.IsSetReq() {
		return ProductServiceUpdateProductArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceUpdateProductArgs) SetReq(val *UpdateProductReq) {
	p.Req = val
}

func (p *ProductServiceUpdateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceUpdateProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceUpdateProductArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceUpdateProductArgs = map[int16]string{
	1: "req",
}

type ProductServiceUpdateProductResult struct {
	Success *UpdateProductResp `thrift:"success,0,optional" frugal:"0,optional,UpdateProductResp" json:"success,omitempty"`
}

func NewProductServiceUpdateProductResult() *ProductServiceUpdateProductResult {
	return &ProductServiceUpdateProductResult{}
}

func (p *ProductServiceUpdateProductResult) InitDefault() {
}

var ProductServiceUpdateProductResult_Success_DEFAULT *UpdateProductResp

func (p *ProductServiceUpdateProductResult) GetSuccess() (v *UpdateProductResp) {
	if !p.IsSetSuccess() {
		return ProductServiceUpdateProductResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceUpdateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateProductResp)
}

func (p *ProductServiceUpdateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceUpdateProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceUpdateProductResult(%+v)", *p)
}

var fieldIDToName_ProductServiceUpdateProductResult = map[int16]string{
	0: "success",
}

type ProductServiceRemoveProductArgs struct {
	Req *RemoveProductReq `thrift:"req,1" frugal:"1,default,RemoveProductReq" json:"req"`
}

func NewProductServiceRemoveProductArgs() *ProductServiceRemoveProductArgs {
	return &ProductServiceRemoveProductArgs{}
}

func (p *ProductServiceRemoveProductArgs) InitDefault() {
}

var ProductServiceRemoveProductArgs_Req_DEFAULT *RemoveProductReq

func (p *ProductServiceRemoveProductArgs) GetReq() (v *RemoveProductReq) {
	if !p.IsSetReq() {
		return ProductServiceRemoveProductArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceRemoveProductArgs) SetReq(val *RemoveProductReq) {
	p.Req = val
}

func (p *ProductServiceRemoveProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceRemoveProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceRemoveProductArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceRemoveProductArgs = map[int16]string{
	1: "req",
}

type ProductServiceRemoveProductResult struct {
	Success *RemoveProductResp `thrift:"success,0,optional" frugal:"0,optional,RemoveProductResp" json:"success,omitempty"`
}

func NewProductServiceRemoveProductResult() *ProductServiceRemoveProductResult {
	return &ProductServiceRemoveProductResult{}
}

func (p *ProductServiceRemoveProductResult) InitDefault() {
}

var ProductServiceRemoveProductResult_Success_DEFAULT *RemoveProductResp

func (p *ProductServiceRemoveProductResult) GetSuccess() (v *RemoveProductResp) {
	if !p.IsSetSuccess() {
		return ProductServiceRemoveProductResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceRemoveProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*RemoveProductResp)
}

func (p *ProductServiceRemoveProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceRemoveProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceRemoveProductResult(%+v)", *p)
}

var fieldIDToName_ProductServiceRemoveProductResult = map[int16]string{
	0: "success",
}

type ProductServiceGetProductByIDArgs struct {
	Req *GetProductByIDReq `thrift:"req,1" frugal:"1,default,GetProductByIDReq" json:"req"`
}

func NewProductServiceGetProductByIDArgs() *ProductServiceGetProductByIDArgs {
	return &ProductServiceGetProductByIDArgs{}
}

func (p *ProductServiceGetProductByIDArgs) InitDefault() {
}

var ProductServiceGetProductByIDArgs_Req_DEFAULT *GetProductByIDReq

func (p *ProductServiceGetProductByIDArgs) GetReq() (v *GetProductByIDReq) {
	if !p.IsSetReq() {
		return ProductServiceGetProductByIDArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceGetProductByIDArgs) SetReq(val *GetProductByIDReq) {
	p.Req = val
}

func (p *ProductServiceGetProductByIDArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceGetProductByIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetProductByIDArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceGetProductByIDArgs = map[int16]string{
	1: "req",
}

type ProductServiceGetProductByIDResult struct {
	Success *GetProductByIDResp `thrift:"success,0,optional" frugal:"0,optional,GetProductByIDResp" json:"success,omitempty"`
}

func NewProductServiceGetProductByIDResult() *ProductServiceGetProductByIDResult {
	return &ProductServiceGetProductByIDResult{}
}

func (p *ProductServiceGetProductByIDResult) InitDefault() {
}

var ProductServiceGetProductByIDResult_Success_DEFAULT *GetProductByIDResp

func (p *ProductServiceGetProductByIDResult) GetSuccess() (v *GetProductByIDResp) {
	if !p.IsSetSuccess() {
		return ProductServiceGetProductByIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceGetProductByIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetProductByIDResp)
}

func (p *ProductServiceGetProductByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceGetProductByIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetProductByIDResult(%+v)", *p)
}

var fieldIDToName_ProductServiceGetProductByIDResult = map[int16]string{
	0: "success",
}

type ProductServiceListProductArgs struct {
}

func NewProductServiceListProductArgs() *ProductServiceListProductArgs {
	return &ProductServiceListProductArgs{}
}

func (p *ProductServiceListProductArgs) InitDefault() {
}

func (p *ProductServiceListProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceListProductArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceListProductArgs = map[int16]string{}

type ProductServiceListProductResult struct {
	Success *ListProductResp `thrift:"success,0,optional" frugal:"0,optional,ListProductResp" json:"success,omitempty"`
}

func NewProductServiceListProductResult() *ProductServiceListProductResult {
	return &ProductServiceListProductResult{}
}

func (p *ProductServiceListProductResult) InitDefault() {
}

var ProductServiceListProductResult_Success_DEFAULT *ListProductResp

func (p *ProductServiceListProductResult) GetSuccess() (v *ListProductResp) {
	if !p.IsSetSuccess() {
		return ProductServiceListProductResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceListProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListProductResp)
}

func (p *ProductServiceListProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceListProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceListProductResult(%+v)", *p)
}

var fieldIDToName_ProductServiceListProductResult = map[int16]string{
	0: "success",
}

type ProductServiceAdminListProductArgs struct {
	Req *ListProductReq `thrift:"req,1" frugal:"1,default,ListProductReq" json:"req"`
}

func NewProductServiceAdminListProductArgs() *ProductServiceAdminListProductArgs {
	return &ProductServiceAdminListProductArgs{}
}

func (p *ProductServiceAdminListProductArgs) InitDefault() {
}

var ProductServiceAdminListProductArgs_Req_DEFAULT *ListProductReq

func (p *ProductServiceAdminListProductArgs) GetReq() (v *ListProductReq) {
	if !p.IsSetReq() {
		return ProductServiceAdminListProductArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceAdminListProductArgs) SetReq(val *ListProductReq) {
	p.Req = val
}

func (p *ProductServiceAdminListProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceAdminListProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceAdminListProductArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceAdminListProductArgs = map[int16]string{
	1: "req",
}

type ProductServiceAdminListProductResult struct {
	Success *ListProductResp `thrift:"success,0,optional" frugal:"0,optional,ListProductResp" json:"success,omitempty"`
}

func NewProductServiceAdminListProductResult() *ProductServiceAdminListProductResult {
	return &ProductServiceAdminListProductResult{}
}

func (p *ProductServiceAdminListProductResult) InitDefault() {
}

var ProductServiceAdminListProductResult_Success_DEFAULT *ListProductResp

func (p *ProductServiceAdminListProductResult) GetSuccess() (v *ListProductResp) {
	if !p.IsSetSuccess() {
		return ProductServiceAdminListProductResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceAdminListProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListProductResp)
}

func (p *ProductServiceAdminListProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceAdminListProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceAdminListProductResult(%+v)", *p)
}

var fieldIDToName_ProductServiceAdminListProductResult = map[int16]string{
	0: "success",
}

type ProductServiceSearchProductsArgs struct {
	Req *SearchProductsReq `thrift:"req,1" frugal:"1,default,SearchProductsReq" json:"req"`
}

func NewProductServiceSearchProductsArgs() *ProductServiceSearchProductsArgs {
	return &ProductServiceSearchProductsArgs{}
}

func (p *ProductServiceSearchProductsArgs) InitDefault() {
}

var ProductServiceSearchProductsArgs_Req_DEFAULT *SearchProductsReq

func (p *ProductServiceSearchProductsArgs) GetReq() (v *SearchProductsReq) {
	if !p.IsSetReq() {
		return ProductServiceSearchProductsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceSearchProductsArgs) SetReq(val *SearchProductsReq) {
	p.Req = val
}

func (p *ProductServiceSearchProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceSearchProductsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceSearchProductsArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceSearchProductsArgs = map[int16]string{
	1: "req",
}

type ProductServiceSearchProductsResult struct {
	Success *SearchProductsResp `thrift:"success,0,optional" frugal:"0,optional,SearchProductsResp" json:"success,omitempty"`
}

func NewProductServiceSearchProductsResult() *ProductServiceSearchProductsResult {
	return &ProductServiceSearchProductsResult{}
}

func (p *ProductServiceSearchProductsResult) InitDefault() {
}

var ProductServiceSearchProductsResult_Success_DEFAULT *SearchProductsResp

func (p *ProductServiceSearchProductsResult) GetSuccess() (v *SearchProductsResp) {
	if !p.IsSetSuccess() {
		return ProductServiceSearchProductsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceSearchProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*SearchProductsResp)
}

func (p *ProductServiceSearchProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceSearchProductsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceSearchProductsResult(%+v)", *p)
}

var fieldIDToName_ProductServiceSearchProductsResult = map[int16]string{
	0: "success",
}

type ProductServiceCreateProductReviewArgs struct {
	Req *CreateProductReviewReq `thrift:"req,1" frugal:"1,default,CreateProductReviewReq" json:"req"`
}

func NewProductServiceCreateProductReviewArgs() *ProductServiceCreateProductReviewArgs {
	return &ProductServiceCreateProductReviewArgs{}
}

func (p *ProductServiceCreateProductReviewArgs) InitDefault() {
}

var ProductServiceCreateProductReviewArgs_Req_DEFAULT *CreateProductReviewReq

func (p *ProductServiceCreateProductReviewArgs) GetReq() (v *CreateProductReviewReq) {
	if !p.IsSetReq() {
		return ProductServiceCreateProductReviewArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceCreateProductReviewArgs) SetReq(val *CreateProductReviewReq) {
	p.Req = val
}

func (p *ProductServiceCreateProductReviewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceCreateProductReviewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceCreateProductReviewArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceCreateProductReviewArgs = map[int16]string{
	1: "req",
}

type ProductServiceCreateProductReviewResult struct {
	Success *CreateProductReviewResp `thrift:"success,0,optional" frugal:"0,optional,CreateProductReviewResp" json:"success,omitempty"`
}

func NewProductServiceCreateProductReviewResult() *ProductServiceCreateProductReviewResult {
	return &ProductServiceCreateProductReviewResult{}
}

func (p *ProductServiceCreateProductReviewResult) InitDefault() {
}

var ProductServiceCreateProductReviewResult_Success_DEFAULT *CreateProductReviewResp

func (p *ProductServiceCreateProductReviewResult) GetSuccess() (v *CreateProductReviewResp) {
	if !p.IsSetSuccess() {
		return ProductServiceCreateProductReviewResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceCreateProductReviewResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateProductReviewResp)
}

func (p *ProductServiceCreateProductReviewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceCreateProductReviewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceCreateProductReviewResult(%+v)", *p)
}

var fieldIDToName_ProductServiceCreateProductReviewResult = map[int16]string{
	0: "success",
}

type ProductServiceGetProductReviewsArgs struct {
	Req *GetProductReviewsReq `thrift:"req,1" frugal:"1,default,GetProductReviewsReq" json:"req"`
}

func NewProductServiceGetProductReviewsArgs() *ProductServiceGetProductReviewsArgs {
	return &ProductServiceGetProductReviewsArgs{}
}

func (p *ProductServiceGetProductReviewsArgs) InitDefault() {
}

var ProductServiceGetProductReviewsArgs_Req_DEFAULT *GetProductReviewsReq

func (p *ProductServiceGetProductReviewsArgs) GetReq() (v *GetProductReviewsReq) {
	if !p.IsSetReq() {
		return ProductServiceGetProductReviewsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceGetProductReviewsArgs) SetReq(val *GetProductReviewsReq) {
	p.Req = val
}

func (p *ProductServiceGetProductReviewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceGetProductReviewsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetProductReviewsArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceGetProductReviewsArgs = map[int16]string{
	1: "req",
}

type ProductServiceGetProductReviewsResult struct {
	Success *GetProductReviewsResp `thrift:"success,0,optional" frugal:"0,optional,GetProductReviewsResp" json:"success,omitempty"`
}

func NewProductServiceGetProductReviewsResult() *ProductServiceGetProductReviewsResult {
	return &ProductServiceGetProductReviewsResult{}
}

func (p *ProductServiceGetProductReviewsResult) InitDefault() {
}

var ProductServiceGetProductReviewsResult_Success_DEFAULT *GetProductReviewsResp

func (p *ProductServiceGetProductReviewsResult) GetSuccess() (v *GetProductReviewsResp) {
	if !p.IsSetSuccess() {
		return ProductServiceGetProductReviewsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceGetProductReviewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetProductReviewsResp)
}

func (p *ProductServiceGetProductReviewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceGetProductReviewsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetProductReviewsResult(%+v)", *p)
}

var fieldIDToName_ProductServiceGetProductReviewsResult = map[int16]string{
	0: "success",
}

type ProductServiceCreatePromotionArgs struct {
	Req *CreatePromotionReq `thrift:"req,1" frugal:"1,default,CreatePromotionReq" json:"req"`
}

func NewProductServiceCreatePromotionArgs() *ProductServiceCreatePromotionArgs {
	return &ProductServiceCreatePromotionArgs{}
}

func (p *ProductServiceCreatePromotionArgs) InitDefault() {
}

var ProductServiceCreatePromotionArgs_Req_DEFAULT *CreatePromotionReq

func (p *ProductServiceCreatePromotionArgs) GetReq() (v *CreatePromotionReq) {
	if !p.IsSetReq() {
		return ProductServiceCreatePromotionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceCreatePromotionArgs) SetReq(val *CreatePromotionReq) {
	p.Req = val
}

func (p *ProductServiceCreatePromotionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceCreatePromotionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceCreatePromotionArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceCreatePromotionArgs = map[int16]string{
	1: "req",
}

type ProductServiceCreatePromotionResult struct {
	Success *CreatePromotionResp `thrift:"success,0,optional" frugal:"0,optional,CreatePromotionResp" json:"success,omitempty"`
}

func NewProductServiceCreatePromotionResult() *ProductServiceCreatePromotionResult {
	return &ProductServiceCreatePromotionResult{}
}

func (p *ProductServiceCreatePromotionResult) InitDefault() {
}

var ProductServiceCreatePromotionResult_Success_DEFAULT *CreatePromotionResp

func (p *ProductServiceCreatePromotionResult) GetSuccess() (v *CreatePromotionResp) {
	if !p.IsSetSuccess() {
		return ProductServiceCreatePromotionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceCreatePromotionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreatePromotionResp)
}

func (p *ProductServiceCreatePromotionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceCreatePromotionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceCreatePromotionResult(%+v)", *p)
}

var fieldIDToName_ProductServiceCreatePromotionResult = map[int16]string{
	0: "success",
}

type ProductServiceGetActivePromotionsArgs struct {
}

func NewProductServiceGetActivePromotionsArgs() *ProductServiceGetActivePromotionsArgs {
	return &ProductServiceGetActivePromotionsArgs{}
}

func (p *ProductServiceGetActivePromotionsArgs) InitDefault() {
}

func (p *ProductServiceGetActivePromotionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetActivePromotionsArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceGetActivePromotionsArgs = map[int16]string{}

type ProductServiceGetActivePromotionsResult struct {
	Success *GetActivePromotionsResp `thrift:"success,0,optional" frugal:"0,optional,GetActivePromotionsResp" json:"success,omitempty"`
}

func NewProductServiceGetActivePromotionsResult() *ProductServiceGetActivePromotionsResult {
	return &ProductServiceGetActivePromotionsResult{}
}

func (p *ProductServiceGetActivePromotionsResult) InitDefault() {
}

var ProductServiceGetActivePromotionsResult_Success_DEFAULT *GetActivePromotionsResp

func (p *ProductServiceGetActivePromotionsResult) GetSuccess() (v *GetActivePromotionsResp) {
	if !p.IsSetSuccess() {
		return ProductServiceGetActivePromotionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceGetActivePromotionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetActivePromotionsResp)
}

func (p *ProductServiceGetActivePromotionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceGetActivePromotionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetActivePromotionsResult(%+v)", *p)
}

var fieldIDToName_ProductServiceGetActivePromotionsResult = map[int16]string{
	0: "success",
}

type ProductServiceDeletePromotionArgs struct {
	Req *DeletePromotionReq `thrift:"req,1" frugal:"1,default,DeletePromotionReq" json:"req"`
}

func NewProductServiceDeletePromotionArgs() *ProductServiceDeletePromotionArgs {
	return &ProductServiceDeletePromotionArgs{}
}

func (p *ProductServiceDeletePromotionArgs) InitDefault() {
}

var ProductServiceDeletePromotionArgs_Req_DEFAULT *DeletePromotionReq

func (p *ProductServiceDeletePromotionArgs) GetReq() (v *DeletePromotionReq) {
	if !p.IsSetReq() {
		return ProductServiceDeletePromotionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceDeletePromotionArgs) SetReq(val *DeletePromotionReq) {
	p.Req = val
}

func (p *ProductServiceDeletePromotionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceDeletePromotionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceDeletePromotionArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceDeletePromotionArgs = map[int16]string{
	1: "req",
}

type ProductServiceDeletePromotionResult struct {
	Success *DeletePromotionResp `thrift:"success,0,optional" frugal:"0,optional,DeletePromotionResp" json:"success,omitempty"`
}

func NewProductServiceDeletePromotionResult() *ProductServiceDeletePromotionResult {
	return &ProductServiceDeletePromotionResult{}
}

func (p *ProductServiceDeletePromotionResult) InitDefault() {
}

var ProductServiceDeletePromotionResult_Success_DEFAULT *DeletePromotionResp

func (p *ProductServiceDeletePromotionResult) GetSuccess() (v *DeletePromotionResp) {
	if !p.IsSetSuccess() {
		return ProductServiceDeletePromotionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceDeletePromotionResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeletePromotionResp)
}

func (p *ProductServiceDeletePromotionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceDeletePromotionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceDeletePromotionResult(%+v)", *p)
}

var fieldIDToName_ProductServiceDeletePromotionResult = map[int16]string{
	0: "success",
}
