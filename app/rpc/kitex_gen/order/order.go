// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package order

import (
	"context"
	"fmt"
)

type OrderItem struct {
	OrderId        int32   `thrift:"order_id,1" frugal:"1,default,i32" json:"order_id"`
	ProductId      int32   `thrift:"product_id,2" frugal:"2,default,i32" json:"product_id"`
	ItemStatus     bool    `thrift:"item_status,3" frugal:"3,default,bool" json:"item_status"`
	ShippedAt      string  `thrift:"shipped_at,4" frugal:"4,default,string" json:"shipped_at"`
	TrackingNumber string  `thrift:"tracking_number,5" frugal:"5,default,string" json:"tracking_number"`
	ProductName    string  `thrift:"product_name,6" frugal:"6,default,string" json:"product_name"`
	Quantity       int32   `thrift:"quantity,7" frugal:"7,default,i32" json:"quantity"`
	Price          float64 `thrift:"price,8" frugal:"8,default,double" json:"price"`
	ProductImage   string  `thrift:"product_image,9" frugal:"9,default,string" json:"product_image"`
}

func NewOrderItem() *OrderItem {
	return &OrderItem{}
}

func (p *OrderItem) InitDefault() {
}

func (p *OrderItem) GetOrderId() (v int32) {
	return p.OrderId
}

func (p *OrderItem) GetProductId() (v int32) {
	return p.ProductId
}

func (p *OrderItem) GetItemStatus() (v bool) {
	return p.ItemStatus
}

func (p *OrderItem) GetShippedAt() (v string) {
	return p.ShippedAt
}

func (p *OrderItem) GetTrackingNumber() (v string) {
	return p.TrackingNumber
}

func (p *OrderItem) GetProductName() (v string) {
	return p.ProductName
}

func (p *OrderItem) GetQuantity() (v int32) {
	return p.Quantity
}

func (p *OrderItem) GetPrice() (v float64) {
	return p.Price
}

func (p *OrderItem) GetProductImage() (v string) {
	return p.ProductImage
}
func (p *OrderItem) SetOrderId(val int32) {
	p.OrderId = val
}
func (p *OrderItem) SetProductId(val int32) {
	p.ProductId = val
}
func (p *OrderItem) SetItemStatus(val bool) {
	p.ItemStatus = val
}
func (p *OrderItem) SetShippedAt(val string) {
	p.ShippedAt = val
}
func (p *OrderItem) SetTrackingNumber(val string) {
	p.TrackingNumber = val
}
func (p *OrderItem) SetProductName(val string) {
	p.ProductName = val
}
func (p *OrderItem) SetQuantity(val int32) {
	p.Quantity = val
}
func (p *OrderItem) SetPrice(val float64) {
	p.Price = val
}
func (p *OrderItem) SetProductImage(val string) {
	p.ProductImage = val
}

func (p *OrderItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderItem(%+v)", *p)
}

var fieldIDToName_OrderItem = map[int16]string{
	1: "order_id",
	2: "product_id",
	3: "item_status",
	4: "shipped_at",
	5: "tracking_number",
	6: "product_name",
	7: "quantity",
	8: "price",
	9: "product_image",
}

type Order struct {
	Id             int32        `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	UserId         int32        `thrift:"user_id,2" frugal:"2,default,i32" json:"user_id"`
	Number         string       `thrift:"number,3" frugal:"3,default,string" json:"number"`
	TotalPrice     float64      `thrift:"total_price,4" frugal:"4,default,double" json:"total_price"`
	Discount       float64      `thrift:"discount,5" frugal:"5,default,double" json:"discount"`
	Status         int32        `thrift:"status,6" frugal:"6,default,i32" json:"status"`
	Items          []*OrderItem `thrift:"items,7" frugal:"7,default,list<OrderItem>" json:"items"`
	CreatedAt      string       `thrift:"created_at,8" frugal:"8,default,string" json:"created_at"`
	PayTime        string       `thrift:"pay_time,9" frugal:"9,default,string" json:"pay_time"`
	Name           string       `thrift:"name,10" frugal:"10,default,string" json:"name"`
	Phone          string       `thrift:"phone,11" frugal:"11,default,string" json:"phone"`
	Address        string       `thrift:"address,12" frugal:"12,default,string" json:"address"`
	TrackingNumber string       `thrift:"tracking_number,13" frugal:"13,default,string" json:"tracking_number"`
}

func NewOrder() *Order {
	return &Order{}
}

func (p *Order) InitDefault() {
}

func (p *Order) GetId() (v int32) {
	return p.Id
}

func (p *Order) GetUserId() (v int32) {
	return p.UserId
}

func (p *Order) GetNumber() (v string) {
	return p.Number
}

func (p *Order) GetTotalPrice() (v float64) {
	return p.TotalPrice
}

func (p *Order) GetDiscount() (v float64) {
	return p.Discount
}

func (p *Order) GetStatus() (v int32) {
	return p.Status
}

func (p *Order) GetItems() (v []*OrderItem) {
	return p.Items
}

func (p *Order) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Order) GetPayTime() (v string) {
	return p.PayTime
}

func (p *Order) GetName() (v string) {
	return p.Name
}

func (p *Order) GetPhone() (v string) {
	return p.Phone
}

func (p *Order) GetAddress() (v string) {
	return p.Address
}

func (p *Order) GetTrackingNumber() (v string) {
	return p.TrackingNumber
}
func (p *Order) SetId(val int32) {
	p.Id = val
}
func (p *Order) SetUserId(val int32) {
	p.UserId = val
}
func (p *Order) SetNumber(val string) {
	p.Number = val
}
func (p *Order) SetTotalPrice(val float64) {
	p.TotalPrice = val
}
func (p *Order) SetDiscount(val float64) {
	p.Discount = val
}
func (p *Order) SetStatus(val int32) {
	p.Status = val
}
func (p *Order) SetItems(val []*OrderItem) {
	p.Items = val
}
func (p *Order) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Order) SetPayTime(val string) {
	p.PayTime = val
}
func (p *Order) SetName(val string) {
	p.Name = val
}
func (p *Order) SetPhone(val string) {
	p.Phone = val
}
func (p *Order) SetAddress(val string) {
	p.Address = val
}
func (p *Order) SetTrackingNumber(val string) {
	p.TrackingNumber = val
}

func (p *Order) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Order(%+v)", *p)
}

var fieldIDToName_Order = map[int16]string{
	1:  "id",
	2:  "user_id",
	3:  "number",
	4:  "total_price",
	5:  "discount",
	6:  "status",
	7:  "items",
	8:  "created_at",
	9:  "pay_time",
	10: "name",
	11: "phone",
	12: "address",
	13: "tracking_number",
}

type UserAddress struct {
	Id      int32  `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	UserId  int32  `thrift:"user_id,2" frugal:"2,default,i32" json:"user_id"`
	Name    string `thrift:"name,3" frugal:"3,default,string" json:"name"`
	Phone   string `thrift:"phone,4" frugal:"4,default,string" json:"phone"`
	Address string `thrift:"address,5" frugal:"5,default,string" json:"address"`
}

func NewUserAddress() *UserAddress {
	return &UserAddress{}
}

func (p *UserAddress) InitDefault() {
}

func (p *UserAddress) GetId() (v int32) {
	return p.Id
}

func (p *UserAddress) GetUserId() (v int32) {
	return p.UserId
}

func (p *UserAddress) GetName() (v string) {
	return p.Name
}

func (p *UserAddress) GetPhone() (v string) {
	return p.Phone
}

func (p *UserAddress) GetAddress() (v string) {
	return p.Address
}
func (p *UserAddress) SetId(val int32) {
	p.Id = val
}
func (p *UserAddress) SetUserId(val int32) {
	p.UserId = val
}
func (p *UserAddress) SetName(val string) {
	p.Name = val
}
func (p *UserAddress) SetPhone(val string) {
	p.Phone = val
}
func (p *UserAddress) SetAddress(val string) {
	p.Address = val
}

func (p *UserAddress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAddress(%+v)", *p)
}

var fieldIDToName_UserAddress = map[int16]string{
	1: "id",
	2: "user_id",
	3: "name",
	4: "phone",
	5: "address",
}

type CreateUserAddressReq struct {
	UserId      int32  `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	Phone       string `thrift:"phone,2" frugal:"2,default,string" json:"phone"`
	UserAddress string `thrift:"user_address,3" frugal:"3,default,string" json:"user_address"`
}

func NewCreateUserAddressReq() *CreateUserAddressReq {
	return &CreateUserAddressReq{}
}

func (p *CreateUserAddressReq) InitDefault() {
}

func (p *CreateUserAddressReq) GetUserId() (v int32) {
	return p.UserId
}

func (p *CreateUserAddressReq) GetPhone() (v string) {
	return p.Phone
}

func (p *CreateUserAddressReq) GetUserAddress() (v string) {
	return p.UserAddress
}
func (p *CreateUserAddressReq) SetUserId(val int32) {
	p.UserId = val
}
func (p *CreateUserAddressReq) SetPhone(val string) {
	p.Phone = val
}
func (p *CreateUserAddressReq) SetUserAddress(val string) {
	p.UserAddress = val
}

func (p *CreateUserAddressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserAddressReq(%+v)", *p)
}

var fieldIDToName_CreateUserAddressReq = map[int16]string{
	1: "user_id",
	2: "phone",
	3: "user_address",
}

type CreateUserAddressResp struct {
	UserId  int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	Success bool  `thrift:"success,2" frugal:"2,default,bool" json:"success"`
}

func NewCreateUserAddressResp() *CreateUserAddressResp {
	return &CreateUserAddressResp{}
}

func (p *CreateUserAddressResp) InitDefault() {
}

func (p *CreateUserAddressResp) GetUserId() (v int32) {
	return p.UserId
}

func (p *CreateUserAddressResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *CreateUserAddressResp) SetUserId(val int32) {
	p.UserId = val
}
func (p *CreateUserAddressResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *CreateUserAddressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserAddressResp(%+v)", *p)
}

var fieldIDToName_CreateUserAddressResp = map[int16]string{
	1: "user_id",
	2: "success",
}

type DeleteUserAddressReq struct {
	UserId int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
}

func NewDeleteUserAddressReq() *DeleteUserAddressReq {
	return &DeleteUserAddressReq{}
}

func (p *DeleteUserAddressReq) InitDefault() {
}

func (p *DeleteUserAddressReq) GetUserId() (v int32) {
	return p.UserId
}
func (p *DeleteUserAddressReq) SetUserId(val int32) {
	p.UserId = val
}

func (p *DeleteUserAddressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteUserAddressReq(%+v)", *p)
}

var fieldIDToName_DeleteUserAddressReq = map[int16]string{
	1: "user_id",
}

type DeleteUserAddressResp struct {
	UserId  int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	Success bool  `thrift:"success,2" frugal:"2,default,bool" json:"success"`
}

func NewDeleteUserAddressResp() *DeleteUserAddressResp {
	return &DeleteUserAddressResp{}
}

func (p *DeleteUserAddressResp) InitDefault() {
}

func (p *DeleteUserAddressResp) GetUserId() (v int32) {
	return p.UserId
}

func (p *DeleteUserAddressResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *DeleteUserAddressResp) SetUserId(val int32) {
	p.UserId = val
}
func (p *DeleteUserAddressResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *DeleteUserAddressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteUserAddressResp(%+v)", *p)
}

var fieldIDToName_DeleteUserAddressResp = map[int16]string{
	1: "user_id",
	2: "success",
}

type UpdateUserAddressReq struct {
	UserId      int32  `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	UserAddress string `thrift:"user_address,2" frugal:"2,default,string" json:"user_address"`
}

func NewUpdateUserAddressReq() *UpdateUserAddressReq {
	return &UpdateUserAddressReq{}
}

func (p *UpdateUserAddressReq) InitDefault() {
}

func (p *UpdateUserAddressReq) GetUserId() (v int32) {
	return p.UserId
}

func (p *UpdateUserAddressReq) GetUserAddress() (v string) {
	return p.UserAddress
}
func (p *UpdateUserAddressReq) SetUserId(val int32) {
	p.UserId = val
}
func (p *UpdateUserAddressReq) SetUserAddress(val string) {
	p.UserAddress = val
}

func (p *UpdateUserAddressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserAddressReq(%+v)", *p)
}

var fieldIDToName_UpdateUserAddressReq = map[int16]string{
	1: "user_id",
	2: "user_address",
}

type UpdateUserAddressResp struct {
	UserAddress string `thrift:"user_address,1" frugal:"1,default,string" json:"user_address"`
	Success     bool   `thrift:"success,2" frugal:"2,default,bool" json:"success"`
}

func NewUpdateUserAddressResp() *UpdateUserAddressResp {
	return &UpdateUserAddressResp{}
}

func (p *UpdateUserAddressResp) InitDefault() {
}

func (p *UpdateUserAddressResp) GetUserAddress() (v string) {
	return p.UserAddress
}

func (p *UpdateUserAddressResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *UpdateUserAddressResp) SetUserAddress(val string) {
	p.UserAddress = val
}
func (p *UpdateUserAddressResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *UpdateUserAddressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserAddressResp(%+v)", *p)
}

var fieldIDToName_UpdateUserAddressResp = map[int16]string{
	1: "user_address",
	2: "success",
}

type GetUserAddressReq struct {
	UserId int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
}

func NewGetUserAddressReq() *GetUserAddressReq {
	return &GetUserAddressReq{}
}

func (p *GetUserAddressReq) InitDefault() {
}

func (p *GetUserAddressReq) GetUserId() (v int32) {
	return p.UserId
}
func (p *GetUserAddressReq) SetUserId(val int32) {
	p.UserId = val
}

func (p *GetUserAddressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserAddressReq(%+v)", *p)
}

var fieldIDToName_GetUserAddressReq = map[int16]string{
	1: "user_id",
}

type GetUserAddressResp struct {
	UserAddresses []*UserAddress `thrift:"user_addresses,1" frugal:"1,default,list<UserAddress>" json:"user_addresses"`
}

func NewGetUserAddressResp() *GetUserAddressResp {
	return &GetUserAddressResp{}
}

func (p *GetUserAddressResp) InitDefault() {
}

func (p *GetUserAddressResp) GetUserAddresses() (v []*UserAddress) {
	return p.UserAddresses
}
func (p *GetUserAddressResp) SetUserAddresses(val []*UserAddress) {
	p.UserAddresses = val
}

func (p *GetUserAddressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserAddressResp(%+v)", *p)
}

var fieldIDToName_GetUserAddressResp = map[int16]string{
	1: "user_addresses",
}

type UpdateOrderTrackingReq struct {
	OrderId        int32  `thrift:"order_id,1" frugal:"1,default,i32" json:"order_id"`
	TrackingNumber string `thrift:"tracking_number,2" frugal:"2,default,string" json:"tracking_number"`
}

func NewUpdateOrderTrackingReq() *UpdateOrderTrackingReq {
	return &UpdateOrderTrackingReq{}
}

func (p *UpdateOrderTrackingReq) InitDefault() {
}

func (p *UpdateOrderTrackingReq) GetOrderId() (v int32) {
	return p.OrderId
}

func (p *UpdateOrderTrackingReq) GetTrackingNumber() (v string) {
	return p.TrackingNumber
}
func (p *UpdateOrderTrackingReq) SetOrderId(val int32) {
	p.OrderId = val
}
func (p *UpdateOrderTrackingReq) SetTrackingNumber(val string) {
	p.TrackingNumber = val
}

func (p *UpdateOrderTrackingReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOrderTrackingReq(%+v)", *p)
}

var fieldIDToName_UpdateOrderTrackingReq = map[int16]string{
	1: "order_id",
	2: "tracking_number",
}

type UpdateOrderTrackingResp struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewUpdateOrderTrackingResp() *UpdateOrderTrackingResp {
	return &UpdateOrderTrackingResp{}
}

func (p *UpdateOrderTrackingResp) InitDefault() {
}

func (p *UpdateOrderTrackingResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *UpdateOrderTrackingResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *UpdateOrderTrackingResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOrderTrackingResp(%+v)", *p)
}

var fieldIDToName_UpdateOrderTrackingResp = map[int16]string{
	1: "success",
}

type UpdateOrderDiscountReq struct {
	OrderId  int32   `thrift:"order_id,1" frugal:"1,default,i32" json:"order_id"`
	Discount float64 `thrift:"discount,2" frugal:"2,default,double" json:"discount"`
}

func NewUpdateOrderDiscountReq() *UpdateOrderDiscountReq {
	return &UpdateOrderDiscountReq{}
}

func (p *UpdateOrderDiscountReq) InitDefault() {
}

func (p *UpdateOrderDiscountReq) GetOrderId() (v int32) {
	return p.OrderId
}

func (p *UpdateOrderDiscountReq) GetDiscount() (v float64) {
	return p.Discount
}
func (p *UpdateOrderDiscountReq) SetOrderId(val int32) {
	p.OrderId = val
}
func (p *UpdateOrderDiscountReq) SetDiscount(val float64) {
	p.Discount = val
}

func (p *UpdateOrderDiscountReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOrderDiscountReq(%+v)", *p)
}

var fieldIDToName_UpdateOrderDiscountReq = map[int16]string{
	1: "order_id",
	2: "discount",
}

type UpdateOrderDiscountResp struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewUpdateOrderDiscountResp() *UpdateOrderDiscountResp {
	return &UpdateOrderDiscountResp{}
}

func (p *UpdateOrderDiscountResp) InitDefault() {
}

func (p *UpdateOrderDiscountResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *UpdateOrderDiscountResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *UpdateOrderDiscountResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOrderDiscountResp(%+v)", *p)
}

var fieldIDToName_UpdateOrderDiscountResp = map[int16]string{
	1: "success",
}

type CreateOrderReq struct {
	UserId       int32   `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	CartItemIDs  []int32 `thrift:"cartItemIDs,2" frugal:"2,default,list<i32>" json:"cartItemIDs"`
	Phone        string  `thrift:"phone,3" frugal:"3,default,string" json:"phone"`
	OrderAddress string  `thrift:"order_address,4" frugal:"4,default,string" json:"order_address"`
}

func NewCreateOrderReq() *CreateOrderReq {
	return &CreateOrderReq{}
}

func (p *CreateOrderReq) InitDefault() {
}

func (p *CreateOrderReq) GetUserId() (v int32) {
	return p.UserId
}

func (p *CreateOrderReq) GetCartItemIDs() (v []int32) {
	return p.CartItemIDs
}

func (p *CreateOrderReq) GetPhone() (v string) {
	return p.Phone
}

func (p *CreateOrderReq) GetOrderAddress() (v string) {
	return p.OrderAddress
}
func (p *CreateOrderReq) SetUserId(val int32) {
	p.UserId = val
}
func (p *CreateOrderReq) SetCartItemIDs(val []int32) {
	p.CartItemIDs = val
}
func (p *CreateOrderReq) SetPhone(val string) {
	p.Phone = val
}
func (p *CreateOrderReq) SetOrderAddress(val string) {
	p.OrderAddress = val
}

func (p *CreateOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrderReq(%+v)", *p)
}

var fieldIDToName_CreateOrderReq = map[int16]string{
	1: "user_id",
	2: "cartItemIDs",
	3: "phone",
	4: "order_address",
}

type CreateOrderResp struct {
	Order *Order `thrift:"order,1" frugal:"1,default,Order" json:"order"`
}

func NewCreateOrderResp() *CreateOrderResp {
	return &CreateOrderResp{}
}

func (p *CreateOrderResp) InitDefault() {
}

var CreateOrderResp_Order_DEFAULT *Order

func (p *CreateOrderResp) GetOrder() (v *Order) {
	if !p.IsSetOrder() {
		return CreateOrderResp_Order_DEFAULT
	}
	return p.Order
}
func (p *CreateOrderResp) SetOrder(val *Order) {
	p.Order = val
}

func (p *CreateOrderResp) IsSetOrder() bool {
	return p.Order != nil
}

func (p *CreateOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrderResp(%+v)", *p)
}

var fieldIDToName_CreateOrderResp = map[int16]string{
	1: "order",
}

type UpdateOrderAddressReq struct {
	OrderId      int32  `thrift:"order_id,1" frugal:"1,default,i32" json:"order_id"`
	AddressName  string `thrift:"address_name,2" frugal:"2,default,string" json:"address_name"`
	AddressPhone string `thrift:"address_phone,3" frugal:"3,default,string" json:"address_phone"`
	Address      string `thrift:"address,4" frugal:"4,default,string" json:"address"`
}

func NewUpdateOrderAddressReq() *UpdateOrderAddressReq {
	return &UpdateOrderAddressReq{}
}

func (p *UpdateOrderAddressReq) InitDefault() {
}

func (p *UpdateOrderAddressReq) GetOrderId() (v int32) {
	return p.OrderId
}

func (p *UpdateOrderAddressReq) GetAddressName() (v string) {
	return p.AddressName
}

func (p *UpdateOrderAddressReq) GetAddressPhone() (v string) {
	return p.AddressPhone
}

func (p *UpdateOrderAddressReq) GetAddress() (v string) {
	return p.Address
}
func (p *UpdateOrderAddressReq) SetOrderId(val int32) {
	p.OrderId = val
}
func (p *UpdateOrderAddressReq) SetAddressName(val string) {
	p.AddressName = val
}
func (p *UpdateOrderAddressReq) SetAddressPhone(val string) {
	p.AddressPhone = val
}
func (p *UpdateOrderAddressReq) SetAddress(val string) {
	p.Address = val
}

func (p *UpdateOrderAddressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOrderAddressReq(%+v)", *p)
}

var fieldIDToName_UpdateOrderAddressReq = map[int16]string{
	1: "order_id",
	2: "address_name",
	3: "address_phone",
	4: "address",
}

type UpdateOrderAddressResp struct {
	OrderAddress string `thrift:"order_address,1" frugal:"1,default,string" json:"order_address"`
	Success      bool   `thrift:"success,2" frugal:"2,default,bool" json:"success"`
}

func NewUpdateOrderAddressResp() *UpdateOrderAddressResp {
	return &UpdateOrderAddressResp{}
}

func (p *UpdateOrderAddressResp) InitDefault() {
}

func (p *UpdateOrderAddressResp) GetOrderAddress() (v string) {
	return p.OrderAddress
}

func (p *UpdateOrderAddressResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *UpdateOrderAddressResp) SetOrderAddress(val string) {
	p.OrderAddress = val
}
func (p *UpdateOrderAddressResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *UpdateOrderAddressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOrderAddressResp(%+v)", *p)
}

var fieldIDToName_UpdateOrderAddressResp = map[int16]string{
	1: "order_address",
	2: "success",
}

type UpdateOrderStatusReq struct {
	OrderId int32 `thrift:"order_id,1" frugal:"1,default,i32" json:"order_id"`
	Status  int32 `thrift:"status,2" frugal:"2,default,i32" json:"status"`
}

func NewUpdateOrderStatusReq() *UpdateOrderStatusReq {
	return &UpdateOrderStatusReq{}
}

func (p *UpdateOrderStatusReq) InitDefault() {
}

func (p *UpdateOrderStatusReq) GetOrderId() (v int32) {
	return p.OrderId
}

func (p *UpdateOrderStatusReq) GetStatus() (v int32) {
	return p.Status
}
func (p *UpdateOrderStatusReq) SetOrderId(val int32) {
	p.OrderId = val
}
func (p *UpdateOrderStatusReq) SetStatus(val int32) {
	p.Status = val
}

func (p *UpdateOrderStatusReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOrderStatusReq(%+v)", *p)
}

var fieldIDToName_UpdateOrderStatusReq = map[int16]string{
	1: "order_id",
	2: "status",
}

type UpdateOrderStatusResp struct {
	Status  int32 `thrift:"status,1" frugal:"1,default,i32" json:"status"`
	Success bool  `thrift:"success,2" frugal:"2,default,bool" json:"success"`
}

func NewUpdateOrderStatusResp() *UpdateOrderStatusResp {
	return &UpdateOrderStatusResp{}
}

func (p *UpdateOrderStatusResp) InitDefault() {
}

func (p *UpdateOrderStatusResp) GetStatus() (v int32) {
	return p.Status
}

func (p *UpdateOrderStatusResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *UpdateOrderStatusResp) SetStatus(val int32) {
	p.Status = val
}
func (p *UpdateOrderStatusResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *UpdateOrderStatusResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOrderStatusResp(%+v)", *p)
}

var fieldIDToName_UpdateOrderStatusResp = map[int16]string{
	1: "status",
	2: "success",
}

type ListOrderReq struct {
	UserId   int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	PageNum  int32 `thrift:"page_num,2" frugal:"2,default,i32" json:"page_num"`
	PageSize int32 `thrift:"page_size,3" frugal:"3,default,i32" json:"page_size"`
}

func NewListOrderReq() *ListOrderReq {
	return &ListOrderReq{}
}

func (p *ListOrderReq) InitDefault() {
}

func (p *ListOrderReq) GetUserId() (v int32) {
	return p.UserId
}

func (p *ListOrderReq) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *ListOrderReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *ListOrderReq) SetUserId(val int32) {
	p.UserId = val
}
func (p *ListOrderReq) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *ListOrderReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *ListOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListOrderReq(%+v)", *p)
}

var fieldIDToName_ListOrderReq = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

type ListOrderResp struct {
	Orders     []*Order `thrift:"orders,1" frugal:"1,default,list<Order>" json:"orders"`
	TotalCount int64    `thrift:"total_count,2" frugal:"2,default,i64" json:"total_count"`
}

func NewListOrderResp() *ListOrderResp {
	return &ListOrderResp{}
}

func (p *ListOrderResp) InitDefault() {
}

func (p *ListOrderResp) GetOrders() (v []*Order) {
	return p.Orders
}

func (p *ListOrderResp) GetTotalCount() (v int64) {
	return p.TotalCount
}
func (p *ListOrderResp) SetOrders(val []*Order) {
	p.Orders = val
}
func (p *ListOrderResp) SetTotalCount(val int64) {
	p.TotalCount = val
}

func (p *ListOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListOrderResp(%+v)", *p)
}

var fieldIDToName_ListOrderResp = map[int16]string{
	1: "orders",
	2: "total_count",
}

type GetOrderReq struct {
	OrderId int32 `thrift:"order_id,1" frugal:"1,default,i32" json:"order_id"`
}

func NewGetOrderReq() *GetOrderReq {
	return &GetOrderReq{}
}

func (p *GetOrderReq) InitDefault() {
}

func (p *GetOrderReq) GetOrderId() (v int32) {
	return p.OrderId
}
func (p *GetOrderReq) SetOrderId(val int32) {
	p.OrderId = val
}

func (p *GetOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOrderReq(%+v)", *p)
}

var fieldIDToName_GetOrderReq = map[int16]string{
	1: "order_id",
}

type GetOrderResp struct {
	Order *Order `thrift:"order,1" frugal:"1,default,Order" json:"order"`
}

func NewGetOrderResp() *GetOrderResp {
	return &GetOrderResp{}
}

func (p *GetOrderResp) InitDefault() {
}

var GetOrderResp_Order_DEFAULT *Order

func (p *GetOrderResp) GetOrder() (v *Order) {
	if !p.IsSetOrder() {
		return GetOrderResp_Order_DEFAULT
	}
	return p.Order
}
func (p *GetOrderResp) SetOrder(val *Order) {
	p.Order = val
}

func (p *GetOrderResp) IsSetOrder() bool {
	return p.Order != nil
}

func (p *GetOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOrderResp(%+v)", *p)
}

var fieldIDToName_GetOrderResp = map[int16]string{
	1: "order",
}

type SalesReportReq struct {
	StartDate *string `thrift:"start_date,1,optional" frugal:"1,optional,string" json:"start_date,omitempty"`
	EndDate   *string `thrift:"end_date,2,optional" frugal:"2,optional,string" json:"end_date,omitempty"`
}

func NewSalesReportReq() *SalesReportReq {
	return &SalesReportReq{}
}

func (p *SalesReportReq) InitDefault() {
}

var SalesReportReq_StartDate_DEFAULT string

func (p *SalesReportReq) GetStartDate() (v string) {
	if !p.IsSetStartDate() {
		return SalesReportReq_StartDate_DEFAULT
	}
	return *p.StartDate
}

var SalesReportReq_EndDate_DEFAULT string

func (p *SalesReportReq) GetEndDate() (v string) {
	if !p.IsSetEndDate() {
		return SalesReportReq_EndDate_DEFAULT
	}
	return *p.EndDate
}
func (p *SalesReportReq) SetStartDate(val *string) {
	p.StartDate = val
}
func (p *SalesReportReq) SetEndDate(val *string) {
	p.EndDate = val
}

func (p *SalesReportReq) IsSetStartDate() bool {
	return p.StartDate != nil
}

func (p *SalesReportReq) IsSetEndDate() bool {
	return p.EndDate != nil
}

func (p *SalesReportReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalesReportReq(%+v)", *p)
}

var fieldIDToName_SalesReportReq = map[int16]string{
	1: "start_date",
	2: "end_date",
}

type SalesReportResp struct {
	TotalRevenue    float64          `thrift:"total_revenue,1,required" frugal:"1,required,double" json:"total_revenue"`
	OrderCount      int32            `thrift:"order_count,2,required" frugal:"2,required,i32" json:"order_count"`
	TopProducts     map[string]int32 `thrift:"top_products,3,optional" frugal:"3,optional,map<string:i32>" json:"top_products,omitempty"`
	AverageOrderAmt float64          `thrift:"average_orderAmt,4,required" frugal:"4,required,double" json:"average_orderAmt"`
}

func NewSalesReportResp() *SalesReportResp {
	return &SalesReportResp{}
}

func (p *SalesReportResp) InitDefault() {
}

func (p *SalesReportResp) GetTotalRevenue() (v float64) {
	return p.TotalRevenue
}

func (p *SalesReportResp) GetOrderCount() (v int32) {
	return p.OrderCount
}

var SalesReportResp_TopProducts_DEFAULT map[string]int32

func (p *SalesReportResp) GetTopProducts() (v map[string]int32) {
	if !p.IsSetTopProducts() {
		return SalesReportResp_TopProducts_DEFAULT
	}
	return p.TopProducts
}

func (p *SalesReportResp) GetAverageOrderAmt() (v float64) {
	return p.AverageOrderAmt
}
func (p *SalesReportResp) SetTotalRevenue(val float64) {
	p.TotalRevenue = val
}
func (p *SalesReportResp) SetOrderCount(val int32) {
	p.OrderCount = val
}
func (p *SalesReportResp) SetTopProducts(val map[string]int32) {
	p.TopProducts = val
}
func (p *SalesReportResp) SetAverageOrderAmt(val float64) {
	p.AverageOrderAmt = val
}

func (p *SalesReportResp) IsSetTopProducts() bool {
	return p.TopProducts != nil
}

func (p *SalesReportResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalesReportResp(%+v)", *p)
}

var fieldIDToName_SalesReportResp = map[int16]string{
	1: "total_revenue",
	2: "order_count",
	3: "top_products",
	4: "average_orderAmt",
}

type SalesReportByDateReq struct {
}

func NewSalesReportByDateReq() *SalesReportByDateReq {
	return &SalesReportByDateReq{}
}

func (p *SalesReportByDateReq) InitDefault() {
}

func (p *SalesReportByDateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalesReportByDateReq(%+v)", *p)
}

var fieldIDToName_SalesReportByDateReq = map[int16]string{}

type SalesReportByDateResp struct {
	DateRevenue map[string]float64 `thrift:"date_revenue,1,optional" frugal:"1,optional,map<string:double>" json:"date_revenue,omitempty"`
}

func NewSalesReportByDateResp() *SalesReportByDateResp {
	return &SalesReportByDateResp{}
}

func (p *SalesReportByDateResp) InitDefault() {
}

var SalesReportByDateResp_DateRevenue_DEFAULT map[string]float64

func (p *SalesReportByDateResp) GetDateRevenue() (v map[string]float64) {
	if !p.IsSetDateRevenue() {
		return SalesReportByDateResp_DateRevenue_DEFAULT
	}
	return p.DateRevenue
}
func (p *SalesReportByDateResp) SetDateRevenue(val map[string]float64) {
	p.DateRevenue = val
}

func (p *SalesReportByDateResp) IsSetDateRevenue() bool {
	return p.DateRevenue != nil
}

func (p *SalesReportByDateResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalesReportByDateResp(%+v)", *p)
}

var fieldIDToName_SalesReportByDateResp = map[int16]string{
	1: "date_revenue",
}

type OrderService interface {
	CreateOrder(ctx context.Context, req *CreateOrderReq) (r *CreateOrderResp, err error)

	UpdateOrderStatus(ctx context.Context, req *UpdateOrderStatusReq) (r *UpdateOrderStatusResp, err error)

	UpdateOrderAddress(ctx context.Context, req *UpdateOrderAddressReq) (r *UpdateOrderAddressResp, err error)

	GetOrder(ctx context.Context, req *GetOrderReq) (r *GetOrderResp, err error)

	ListUserOrder(ctx context.Context, req *ListOrderReq) (r *ListOrderResp, err error)

	AdminListOrder(ctx context.Context, req *ListOrderReq) (r *ListOrderResp, err error)

	CreateUserAddress(ctx context.Context, req *CreateUserAddressReq) (r *CreateUserAddressResp, err error)

	DeleteUserAddress(ctx context.Context, req *DeleteUserAddressReq) (r *DeleteUserAddressResp, err error)

	UpdateUserAddress(ctx context.Context, req *UpdateUserAddressReq) (r *UpdateUserAddressResp, err error)

	GetUserAddress(ctx context.Context, req *GetUserAddressReq) (r *GetUserAddressResp, err error)

	UpdateOrderTracking(ctx context.Context, req *UpdateOrderTrackingReq) (r *UpdateOrderTrackingResp, err error)

	UpdateOrderDiscount(ctx context.Context, req *UpdateOrderDiscountReq) (r *UpdateOrderDiscountResp, err error)

	GetSalesReport(ctx context.Context, req *SalesReportReq) (r *SalesReportResp, err error)

	GetSalesReportByDate(ctx context.Context, req *SalesReportByDateReq) (r *SalesReportByDateResp, err error)
}

type OrderServiceCreateOrderArgs struct {
	Req *CreateOrderReq `thrift:"req,1" frugal:"1,default,CreateOrderReq" json:"req"`
}

func NewOrderServiceCreateOrderArgs() *OrderServiceCreateOrderArgs {
	return &OrderServiceCreateOrderArgs{}
}

func (p *OrderServiceCreateOrderArgs) InitDefault() {
}

var OrderServiceCreateOrderArgs_Req_DEFAULT *CreateOrderReq

func (p *OrderServiceCreateOrderArgs) GetReq() (v *CreateOrderReq) {
	if !p.IsSetReq() {
		return OrderServiceCreateOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceCreateOrderArgs) SetReq(val *CreateOrderReq) {
	p.Req = val
}

func (p *OrderServiceCreateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceCreateOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceCreateOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceCreateOrderResult struct {
	Success *CreateOrderResp `thrift:"success,0,optional" frugal:"0,optional,CreateOrderResp" json:"success,omitempty"`
}

func NewOrderServiceCreateOrderResult() *OrderServiceCreateOrderResult {
	return &OrderServiceCreateOrderResult{}
}

func (p *OrderServiceCreateOrderResult) InitDefault() {
}

var OrderServiceCreateOrderResult_Success_DEFAULT *CreateOrderResp

func (p *OrderServiceCreateOrderResult) GetSuccess() (v *CreateOrderResp) {
	if !p.IsSetSuccess() {
		return OrderServiceCreateOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceCreateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateOrderResp)
}

func (p *OrderServiceCreateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceCreateOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceCreateOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceUpdateOrderStatusArgs struct {
	Req *UpdateOrderStatusReq `thrift:"req,1" frugal:"1,default,UpdateOrderStatusReq" json:"req"`
}

func NewOrderServiceUpdateOrderStatusArgs() *OrderServiceUpdateOrderStatusArgs {
	return &OrderServiceUpdateOrderStatusArgs{}
}

func (p *OrderServiceUpdateOrderStatusArgs) InitDefault() {
}

var OrderServiceUpdateOrderStatusArgs_Req_DEFAULT *UpdateOrderStatusReq

func (p *OrderServiceUpdateOrderStatusArgs) GetReq() (v *UpdateOrderStatusReq) {
	if !p.IsSetReq() {
		return OrderServiceUpdateOrderStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceUpdateOrderStatusArgs) SetReq(val *UpdateOrderStatusReq) {
	p.Req = val
}

func (p *OrderServiceUpdateOrderStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceUpdateOrderStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceUpdateOrderStatusArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceUpdateOrderStatusArgs = map[int16]string{
	1: "req",
}

type OrderServiceUpdateOrderStatusResult struct {
	Success *UpdateOrderStatusResp `thrift:"success,0,optional" frugal:"0,optional,UpdateOrderStatusResp" json:"success,omitempty"`
}

func NewOrderServiceUpdateOrderStatusResult() *OrderServiceUpdateOrderStatusResult {
	return &OrderServiceUpdateOrderStatusResult{}
}

func (p *OrderServiceUpdateOrderStatusResult) InitDefault() {
}

var OrderServiceUpdateOrderStatusResult_Success_DEFAULT *UpdateOrderStatusResp

func (p *OrderServiceUpdateOrderStatusResult) GetSuccess() (v *UpdateOrderStatusResp) {
	if !p.IsSetSuccess() {
		return OrderServiceUpdateOrderStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceUpdateOrderStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateOrderStatusResp)
}

func (p *OrderServiceUpdateOrderStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceUpdateOrderStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceUpdateOrderStatusResult(%+v)", *p)
}

var fieldIDToName_OrderServiceUpdateOrderStatusResult = map[int16]string{
	0: "success",
}

type OrderServiceUpdateOrderAddressArgs struct {
	Req *UpdateOrderAddressReq `thrift:"req,1" frugal:"1,default,UpdateOrderAddressReq" json:"req"`
}

func NewOrderServiceUpdateOrderAddressArgs() *OrderServiceUpdateOrderAddressArgs {
	return &OrderServiceUpdateOrderAddressArgs{}
}

func (p *OrderServiceUpdateOrderAddressArgs) InitDefault() {
}

var OrderServiceUpdateOrderAddressArgs_Req_DEFAULT *UpdateOrderAddressReq

func (p *OrderServiceUpdateOrderAddressArgs) GetReq() (v *UpdateOrderAddressReq) {
	if !p.IsSetReq() {
		return OrderServiceUpdateOrderAddressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceUpdateOrderAddressArgs) SetReq(val *UpdateOrderAddressReq) {
	p.Req = val
}

func (p *OrderServiceUpdateOrderAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceUpdateOrderAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceUpdateOrderAddressArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceUpdateOrderAddressArgs = map[int16]string{
	1: "req",
}

type OrderServiceUpdateOrderAddressResult struct {
	Success *UpdateOrderAddressResp `thrift:"success,0,optional" frugal:"0,optional,UpdateOrderAddressResp" json:"success,omitempty"`
}

func NewOrderServiceUpdateOrderAddressResult() *OrderServiceUpdateOrderAddressResult {
	return &OrderServiceUpdateOrderAddressResult{}
}

func (p *OrderServiceUpdateOrderAddressResult) InitDefault() {
}

var OrderServiceUpdateOrderAddressResult_Success_DEFAULT *UpdateOrderAddressResp

func (p *OrderServiceUpdateOrderAddressResult) GetSuccess() (v *UpdateOrderAddressResp) {
	if !p.IsSetSuccess() {
		return OrderServiceUpdateOrderAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceUpdateOrderAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateOrderAddressResp)
}

func (p *OrderServiceUpdateOrderAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceUpdateOrderAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceUpdateOrderAddressResult(%+v)", *p)
}

var fieldIDToName_OrderServiceUpdateOrderAddressResult = map[int16]string{
	0: "success",
}

type OrderServiceGetOrderArgs struct {
	Req *GetOrderReq `thrift:"req,1" frugal:"1,default,GetOrderReq" json:"req"`
}

func NewOrderServiceGetOrderArgs() *OrderServiceGetOrderArgs {
	return &OrderServiceGetOrderArgs{}
}

func (p *OrderServiceGetOrderArgs) InitDefault() {
}

var OrderServiceGetOrderArgs_Req_DEFAULT *GetOrderReq

func (p *OrderServiceGetOrderArgs) GetReq() (v *GetOrderReq) {
	if !p.IsSetReq() {
		return OrderServiceGetOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceGetOrderArgs) SetReq(val *GetOrderReq) {
	p.Req = val
}

func (p *OrderServiceGetOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceGetOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceGetOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceGetOrderResult struct {
	Success *GetOrderResp `thrift:"success,0,optional" frugal:"0,optional,GetOrderResp" json:"success,omitempty"`
}

func NewOrderServiceGetOrderResult() *OrderServiceGetOrderResult {
	return &OrderServiceGetOrderResult{}
}

func (p *OrderServiceGetOrderResult) InitDefault() {
}

var OrderServiceGetOrderResult_Success_DEFAULT *GetOrderResp

func (p *OrderServiceGetOrderResult) GetSuccess() (v *GetOrderResp) {
	if !p.IsSetSuccess() {
		return OrderServiceGetOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceGetOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetOrderResp)
}

func (p *OrderServiceGetOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceGetOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceGetOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceListUserOrderArgs struct {
	Req *ListOrderReq `thrift:"req,1" frugal:"1,default,ListOrderReq" json:"req"`
}

func NewOrderServiceListUserOrderArgs() *OrderServiceListUserOrderArgs {
	return &OrderServiceListUserOrderArgs{}
}

func (p *OrderServiceListUserOrderArgs) InitDefault() {
}

var OrderServiceListUserOrderArgs_Req_DEFAULT *ListOrderReq

func (p *OrderServiceListUserOrderArgs) GetReq() (v *ListOrderReq) {
	if !p.IsSetReq() {
		return OrderServiceListUserOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceListUserOrderArgs) SetReq(val *ListOrderReq) {
	p.Req = val
}

func (p *OrderServiceListUserOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceListUserOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceListUserOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceListUserOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceListUserOrderResult struct {
	Success *ListOrderResp `thrift:"success,0,optional" frugal:"0,optional,ListOrderResp" json:"success,omitempty"`
}

func NewOrderServiceListUserOrderResult() *OrderServiceListUserOrderResult {
	return &OrderServiceListUserOrderResult{}
}

func (p *OrderServiceListUserOrderResult) InitDefault() {
}

var OrderServiceListUserOrderResult_Success_DEFAULT *ListOrderResp

func (p *OrderServiceListUserOrderResult) GetSuccess() (v *ListOrderResp) {
	if !p.IsSetSuccess() {
		return OrderServiceListUserOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceListUserOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListOrderResp)
}

func (p *OrderServiceListUserOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceListUserOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceListUserOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceListUserOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceAdminListOrderArgs struct {
	Req *ListOrderReq `thrift:"req,1" frugal:"1,default,ListOrderReq" json:"req"`
}

func NewOrderServiceAdminListOrderArgs() *OrderServiceAdminListOrderArgs {
	return &OrderServiceAdminListOrderArgs{}
}

func (p *OrderServiceAdminListOrderArgs) InitDefault() {
}

var OrderServiceAdminListOrderArgs_Req_DEFAULT *ListOrderReq

func (p *OrderServiceAdminListOrderArgs) GetReq() (v *ListOrderReq) {
	if !p.IsSetReq() {
		return OrderServiceAdminListOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceAdminListOrderArgs) SetReq(val *ListOrderReq) {
	p.Req = val
}

func (p *OrderServiceAdminListOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceAdminListOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceAdminListOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceAdminListOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceAdminListOrderResult struct {
	Success *ListOrderResp `thrift:"success,0,optional" frugal:"0,optional,ListOrderResp" json:"success,omitempty"`
}

func NewOrderServiceAdminListOrderResult() *OrderServiceAdminListOrderResult {
	return &OrderServiceAdminListOrderResult{}
}

func (p *OrderServiceAdminListOrderResult) InitDefault() {
}

var OrderServiceAdminListOrderResult_Success_DEFAULT *ListOrderResp

func (p *OrderServiceAdminListOrderResult) GetSuccess() (v *ListOrderResp) {
	if !p.IsSetSuccess() {
		return OrderServiceAdminListOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceAdminListOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListOrderResp)
}

func (p *OrderServiceAdminListOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceAdminListOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceAdminListOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceAdminListOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceCreateUserAddressArgs struct {
	Req *CreateUserAddressReq `thrift:"req,1" frugal:"1,default,CreateUserAddressReq" json:"req"`
}

func NewOrderServiceCreateUserAddressArgs() *OrderServiceCreateUserAddressArgs {
	return &OrderServiceCreateUserAddressArgs{}
}

func (p *OrderServiceCreateUserAddressArgs) InitDefault() {
}

var OrderServiceCreateUserAddressArgs_Req_DEFAULT *CreateUserAddressReq

func (p *OrderServiceCreateUserAddressArgs) GetReq() (v *CreateUserAddressReq) {
	if !p.IsSetReq() {
		return OrderServiceCreateUserAddressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceCreateUserAddressArgs) SetReq(val *CreateUserAddressReq) {
	p.Req = val
}

func (p *OrderServiceCreateUserAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceCreateUserAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateUserAddressArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceCreateUserAddressArgs = map[int16]string{
	1: "req",
}

type OrderServiceCreateUserAddressResult struct {
	Success *CreateUserAddressResp `thrift:"success,0,optional" frugal:"0,optional,CreateUserAddressResp" json:"success,omitempty"`
}

func NewOrderServiceCreateUserAddressResult() *OrderServiceCreateUserAddressResult {
	return &OrderServiceCreateUserAddressResult{}
}

func (p *OrderServiceCreateUserAddressResult) InitDefault() {
}

var OrderServiceCreateUserAddressResult_Success_DEFAULT *CreateUserAddressResp

func (p *OrderServiceCreateUserAddressResult) GetSuccess() (v *CreateUserAddressResp) {
	if !p.IsSetSuccess() {
		return OrderServiceCreateUserAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceCreateUserAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateUserAddressResp)
}

func (p *OrderServiceCreateUserAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceCreateUserAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateUserAddressResult(%+v)", *p)
}

var fieldIDToName_OrderServiceCreateUserAddressResult = map[int16]string{
	0: "success",
}

type OrderServiceDeleteUserAddressArgs struct {
	Req *DeleteUserAddressReq `thrift:"req,1" frugal:"1,default,DeleteUserAddressReq" json:"req"`
}

func NewOrderServiceDeleteUserAddressArgs() *OrderServiceDeleteUserAddressArgs {
	return &OrderServiceDeleteUserAddressArgs{}
}

func (p *OrderServiceDeleteUserAddressArgs) InitDefault() {
}

var OrderServiceDeleteUserAddressArgs_Req_DEFAULT *DeleteUserAddressReq

func (p *OrderServiceDeleteUserAddressArgs) GetReq() (v *DeleteUserAddressReq) {
	if !p.IsSetReq() {
		return OrderServiceDeleteUserAddressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceDeleteUserAddressArgs) SetReq(val *DeleteUserAddressReq) {
	p.Req = val
}

func (p *OrderServiceDeleteUserAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceDeleteUserAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceDeleteUserAddressArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceDeleteUserAddressArgs = map[int16]string{
	1: "req",
}

type OrderServiceDeleteUserAddressResult struct {
	Success *DeleteUserAddressResp `thrift:"success,0,optional" frugal:"0,optional,DeleteUserAddressResp" json:"success,omitempty"`
}

func NewOrderServiceDeleteUserAddressResult() *OrderServiceDeleteUserAddressResult {
	return &OrderServiceDeleteUserAddressResult{}
}

func (p *OrderServiceDeleteUserAddressResult) InitDefault() {
}

var OrderServiceDeleteUserAddressResult_Success_DEFAULT *DeleteUserAddressResp

func (p *OrderServiceDeleteUserAddressResult) GetSuccess() (v *DeleteUserAddressResp) {
	if !p.IsSetSuccess() {
		return OrderServiceDeleteUserAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceDeleteUserAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteUserAddressResp)
}

func (p *OrderServiceDeleteUserAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceDeleteUserAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceDeleteUserAddressResult(%+v)", *p)
}

var fieldIDToName_OrderServiceDeleteUserAddressResult = map[int16]string{
	0: "success",
}

type OrderServiceUpdateUserAddressArgs struct {
	Req *UpdateUserAddressReq `thrift:"req,1" frugal:"1,default,UpdateUserAddressReq" json:"req"`
}

func NewOrderServiceUpdateUserAddressArgs() *OrderServiceUpdateUserAddressArgs {
	return &OrderServiceUpdateUserAddressArgs{}
}

func (p *OrderServiceUpdateUserAddressArgs) InitDefault() {
}

var OrderServiceUpdateUserAddressArgs_Req_DEFAULT *UpdateUserAddressReq

func (p *OrderServiceUpdateUserAddressArgs) GetReq() (v *UpdateUserAddressReq) {
	if !p.IsSetReq() {
		return OrderServiceUpdateUserAddressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceUpdateUserAddressArgs) SetReq(val *UpdateUserAddressReq) {
	p.Req = val
}

func (p *OrderServiceUpdateUserAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceUpdateUserAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceUpdateUserAddressArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceUpdateUserAddressArgs = map[int16]string{
	1: "req",
}

type OrderServiceUpdateUserAddressResult struct {
	Success *UpdateUserAddressResp `thrift:"success,0,optional" frugal:"0,optional,UpdateUserAddressResp" json:"success,omitempty"`
}

func NewOrderServiceUpdateUserAddressResult() *OrderServiceUpdateUserAddressResult {
	return &OrderServiceUpdateUserAddressResult{}
}

func (p *OrderServiceUpdateUserAddressResult) InitDefault() {
}

var OrderServiceUpdateUserAddressResult_Success_DEFAULT *UpdateUserAddressResp

func (p *OrderServiceUpdateUserAddressResult) GetSuccess() (v *UpdateUserAddressResp) {
	if !p.IsSetSuccess() {
		return OrderServiceUpdateUserAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceUpdateUserAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateUserAddressResp)
}

func (p *OrderServiceUpdateUserAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceUpdateUserAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceUpdateUserAddressResult(%+v)", *p)
}

var fieldIDToName_OrderServiceUpdateUserAddressResult = map[int16]string{
	0: "success",
}

type OrderServiceGetUserAddressArgs struct {
	Req *GetUserAddressReq `thrift:"req,1" frugal:"1,default,GetUserAddressReq" json:"req"`
}

func NewOrderServiceGetUserAddressArgs() *OrderServiceGetUserAddressArgs {
	return &OrderServiceGetUserAddressArgs{}
}

func (p *OrderServiceGetUserAddressArgs) InitDefault() {
}

var OrderServiceGetUserAddressArgs_Req_DEFAULT *GetUserAddressReq

func (p *OrderServiceGetUserAddressArgs) GetReq() (v *GetUserAddressReq) {
	if !p.IsSetReq() {
		return OrderServiceGetUserAddressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceGetUserAddressArgs) SetReq(val *GetUserAddressReq) {
	p.Req = val
}

func (p *OrderServiceGetUserAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceGetUserAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetUserAddressArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceGetUserAddressArgs = map[int16]string{
	1: "req",
}

type OrderServiceGetUserAddressResult struct {
	Success *GetUserAddressResp `thrift:"success,0,optional" frugal:"0,optional,GetUserAddressResp" json:"success,omitempty"`
}

func NewOrderServiceGetUserAddressResult() *OrderServiceGetUserAddressResult {
	return &OrderServiceGetUserAddressResult{}
}

func (p *OrderServiceGetUserAddressResult) InitDefault() {
}

var OrderServiceGetUserAddressResult_Success_DEFAULT *GetUserAddressResp

func (p *OrderServiceGetUserAddressResult) GetSuccess() (v *GetUserAddressResp) {
	if !p.IsSetSuccess() {
		return OrderServiceGetUserAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceGetUserAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserAddressResp)
}

func (p *OrderServiceGetUserAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceGetUserAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetUserAddressResult(%+v)", *p)
}

var fieldIDToName_OrderServiceGetUserAddressResult = map[int16]string{
	0: "success",
}

type OrderServiceUpdateOrderTrackingArgs struct {
	Req *UpdateOrderTrackingReq `thrift:"req,1" frugal:"1,default,UpdateOrderTrackingReq" json:"req"`
}

func NewOrderServiceUpdateOrderTrackingArgs() *OrderServiceUpdateOrderTrackingArgs {
	return &OrderServiceUpdateOrderTrackingArgs{}
}

func (p *OrderServiceUpdateOrderTrackingArgs) InitDefault() {
}

var OrderServiceUpdateOrderTrackingArgs_Req_DEFAULT *UpdateOrderTrackingReq

func (p *OrderServiceUpdateOrderTrackingArgs) GetReq() (v *UpdateOrderTrackingReq) {
	if !p.IsSetReq() {
		return OrderServiceUpdateOrderTrackingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceUpdateOrderTrackingArgs) SetReq(val *UpdateOrderTrackingReq) {
	p.Req = val
}

func (p *OrderServiceUpdateOrderTrackingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceUpdateOrderTrackingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceUpdateOrderTrackingArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceUpdateOrderTrackingArgs = map[int16]string{
	1: "req",
}

type OrderServiceUpdateOrderTrackingResult struct {
	Success *UpdateOrderTrackingResp `thrift:"success,0,optional" frugal:"0,optional,UpdateOrderTrackingResp" json:"success,omitempty"`
}

func NewOrderServiceUpdateOrderTrackingResult() *OrderServiceUpdateOrderTrackingResult {
	return &OrderServiceUpdateOrderTrackingResult{}
}

func (p *OrderServiceUpdateOrderTrackingResult) InitDefault() {
}

var OrderServiceUpdateOrderTrackingResult_Success_DEFAULT *UpdateOrderTrackingResp

func (p *OrderServiceUpdateOrderTrackingResult) GetSuccess() (v *UpdateOrderTrackingResp) {
	if !p.IsSetSuccess() {
		return OrderServiceUpdateOrderTrackingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceUpdateOrderTrackingResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateOrderTrackingResp)
}

func (p *OrderServiceUpdateOrderTrackingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceUpdateOrderTrackingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceUpdateOrderTrackingResult(%+v)", *p)
}

var fieldIDToName_OrderServiceUpdateOrderTrackingResult = map[int16]string{
	0: "success",
}

type OrderServiceUpdateOrderDiscountArgs struct {
	Req *UpdateOrderDiscountReq `thrift:"req,1" frugal:"1,default,UpdateOrderDiscountReq" json:"req"`
}

func NewOrderServiceUpdateOrderDiscountArgs() *OrderServiceUpdateOrderDiscountArgs {
	return &OrderServiceUpdateOrderDiscountArgs{}
}

func (p *OrderServiceUpdateOrderDiscountArgs) InitDefault() {
}

var OrderServiceUpdateOrderDiscountArgs_Req_DEFAULT *UpdateOrderDiscountReq

func (p *OrderServiceUpdateOrderDiscountArgs) GetReq() (v *UpdateOrderDiscountReq) {
	if !p.IsSetReq() {
		return OrderServiceUpdateOrderDiscountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceUpdateOrderDiscountArgs) SetReq(val *UpdateOrderDiscountReq) {
	p.Req = val
}

func (p *OrderServiceUpdateOrderDiscountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceUpdateOrderDiscountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceUpdateOrderDiscountArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceUpdateOrderDiscountArgs = map[int16]string{
	1: "req",
}

type OrderServiceUpdateOrderDiscountResult struct {
	Success *UpdateOrderDiscountResp `thrift:"success,0,optional" frugal:"0,optional,UpdateOrderDiscountResp" json:"success,omitempty"`
}

func NewOrderServiceUpdateOrderDiscountResult() *OrderServiceUpdateOrderDiscountResult {
	return &OrderServiceUpdateOrderDiscountResult{}
}

func (p *OrderServiceUpdateOrderDiscountResult) InitDefault() {
}

var OrderServiceUpdateOrderDiscountResult_Success_DEFAULT *UpdateOrderDiscountResp

func (p *OrderServiceUpdateOrderDiscountResult) GetSuccess() (v *UpdateOrderDiscountResp) {
	if !p.IsSetSuccess() {
		return OrderServiceUpdateOrderDiscountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceUpdateOrderDiscountResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateOrderDiscountResp)
}

func (p *OrderServiceUpdateOrderDiscountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceUpdateOrderDiscountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceUpdateOrderDiscountResult(%+v)", *p)
}

var fieldIDToName_OrderServiceUpdateOrderDiscountResult = map[int16]string{
	0: "success",
}

type OrderServiceGetSalesReportArgs struct {
	Req *SalesReportReq `thrift:"req,1" frugal:"1,default,SalesReportReq" json:"req"`
}

func NewOrderServiceGetSalesReportArgs() *OrderServiceGetSalesReportArgs {
	return &OrderServiceGetSalesReportArgs{}
}

func (p *OrderServiceGetSalesReportArgs) InitDefault() {
}

var OrderServiceGetSalesReportArgs_Req_DEFAULT *SalesReportReq

func (p *OrderServiceGetSalesReportArgs) GetReq() (v *SalesReportReq) {
	if !p.IsSetReq() {
		return OrderServiceGetSalesReportArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceGetSalesReportArgs) SetReq(val *SalesReportReq) {
	p.Req = val
}

func (p *OrderServiceGetSalesReportArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceGetSalesReportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetSalesReportArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceGetSalesReportArgs = map[int16]string{
	1: "req",
}

type OrderServiceGetSalesReportResult struct {
	Success *SalesReportResp `thrift:"success,0,optional" frugal:"0,optional,SalesReportResp" json:"success,omitempty"`
}

func NewOrderServiceGetSalesReportResult() *OrderServiceGetSalesReportResult {
	return &OrderServiceGetSalesReportResult{}
}

func (p *OrderServiceGetSalesReportResult) InitDefault() {
}

var OrderServiceGetSalesReportResult_Success_DEFAULT *SalesReportResp

func (p *OrderServiceGetSalesReportResult) GetSuccess() (v *SalesReportResp) {
	if !p.IsSetSuccess() {
		return OrderServiceGetSalesReportResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceGetSalesReportResult) SetSuccess(x interface{}) {
	p.Success = x.(*SalesReportResp)
}

func (p *OrderServiceGetSalesReportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceGetSalesReportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetSalesReportResult(%+v)", *p)
}

var fieldIDToName_OrderServiceGetSalesReportResult = map[int16]string{
	0: "success",
}

type OrderServiceGetSalesReportByDateArgs struct {
	Req *SalesReportByDateReq `thrift:"req,1" frugal:"1,default,SalesReportByDateReq" json:"req"`
}

func NewOrderServiceGetSalesReportByDateArgs() *OrderServiceGetSalesReportByDateArgs {
	return &OrderServiceGetSalesReportByDateArgs{}
}

func (p *OrderServiceGetSalesReportByDateArgs) InitDefault() {
}

var OrderServiceGetSalesReportByDateArgs_Req_DEFAULT *SalesReportByDateReq

func (p *OrderServiceGetSalesReportByDateArgs) GetReq() (v *SalesReportByDateReq) {
	if !p.IsSetReq() {
		return OrderServiceGetSalesReportByDateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceGetSalesReportByDateArgs) SetReq(val *SalesReportByDateReq) {
	p.Req = val
}

func (p *OrderServiceGetSalesReportByDateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceGetSalesReportByDateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetSalesReportByDateArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceGetSalesReportByDateArgs = map[int16]string{
	1: "req",
}

type OrderServiceGetSalesReportByDateResult struct {
	Success *SalesReportByDateResp `thrift:"success,0,optional" frugal:"0,optional,SalesReportByDateResp" json:"success,omitempty"`
}

func NewOrderServiceGetSalesReportByDateResult() *OrderServiceGetSalesReportByDateResult {
	return &OrderServiceGetSalesReportByDateResult{}
}

func (p *OrderServiceGetSalesReportByDateResult) InitDefault() {
}

var OrderServiceGetSalesReportByDateResult_Success_DEFAULT *SalesReportByDateResp

func (p *OrderServiceGetSalesReportByDateResult) GetSuccess() (v *SalesReportByDateResp) {
	if !p.IsSetSuccess() {
		return OrderServiceGetSalesReportByDateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceGetSalesReportByDateResult) SetSuccess(x interface{}) {
	p.Success = x.(*SalesReportByDateResp)
}

func (p *OrderServiceGetSalesReportByDateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceGetSalesReportByDateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetSalesReportByDateResult(%+v)", *p)
}

var fieldIDToName_OrderServiceGetSalesReportByDateResult = map[int16]string{
	0: "success",
}
