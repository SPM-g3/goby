// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package agent

import (
	"context"
	"fmt"
)

type AskReq struct {
	UserPrompt string `thrift:"user_prompt,1" frugal:"1,default,string" json:"user_prompt"`
	UserId     int32  `thrift:"user_id,2" frugal:"2,default,i32" json:"user_id"`
}

func NewAskReq() *AskReq {
	return &AskReq{}
}

func (p *AskReq) InitDefault() {
}

func (p *AskReq) GetUserPrompt() (v string) {
	return p.UserPrompt
}

func (p *AskReq) GetUserId() (v int32) {
	return p.UserId
}
func (p *AskReq) SetUserPrompt(val string) {
	p.UserPrompt = val
}
func (p *AskReq) SetUserId(val int32) {
	p.UserId = val
}

func (p *AskReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AskReq(%+v)", *p)
}

var fieldIDToName_AskReq = map[int16]string{
	1: "user_prompt",
	2: "user_id",
}

type AskResp struct {
	Content string `thrift:"content,1" frugal:"1,default,string" json:"content"`
}

func NewAskResp() *AskResp {
	return &AskResp{}
}

func (p *AskResp) InitDefault() {
}

func (p *AskResp) GetContent() (v string) {
	return p.Content
}
func (p *AskResp) SetContent(val string) {
	p.Content = val
}

func (p *AskResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AskResp(%+v)", *p)
}

var fieldIDToName_AskResp = map[int16]string{
	1: "content",
}

type ChatMessageReq struct {
	SenderId   int64  `thrift:"sender_id,1,required" frugal:"1,required,i64" json:"sender_id"`
	ReceiverId int64  `thrift:"receiver_id,2,required" frugal:"2,required,i64" json:"receiver_id"`
	Content    string `thrift:"content,3,required" frugal:"3,required,string" json:"content"`
}

func NewChatMessageReq() *ChatMessageReq {
	return &ChatMessageReq{}
}

func (p *ChatMessageReq) InitDefault() {
}

func (p *ChatMessageReq) GetSenderId() (v int64) {
	return p.SenderId
}

func (p *ChatMessageReq) GetReceiverId() (v int64) {
	return p.ReceiverId
}

func (p *ChatMessageReq) GetContent() (v string) {
	return p.Content
}
func (p *ChatMessageReq) SetSenderId(val int64) {
	p.SenderId = val
}
func (p *ChatMessageReq) SetReceiverId(val int64) {
	p.ReceiverId = val
}
func (p *ChatMessageReq) SetContent(val string) {
	p.Content = val
}

func (p *ChatMessageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessageReq(%+v)", *p)
}

var fieldIDToName_ChatMessageReq = map[int16]string{
	1: "sender_id",
	2: "receiver_id",
	3: "content",
}

type ChatMessageResp struct {
}

func NewChatMessageResp() *ChatMessageResp {
	return &ChatMessageResp{}
}

func (p *ChatMessageResp) InitDefault() {
}

func (p *ChatMessageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessageResp(%+v)", *p)
}

var fieldIDToName_ChatMessageResp = map[int16]string{}

type HistoryMessageReq struct {
	SenderId int64 `thrift:"sender_id,1,required" frugal:"1,required,i64" json:"sender_id"`
}

func NewHistoryMessageReq() *HistoryMessageReq {
	return &HistoryMessageReq{}
}

func (p *HistoryMessageReq) InitDefault() {
}

func (p *HistoryMessageReq) GetSenderId() (v int64) {
	return p.SenderId
}
func (p *HistoryMessageReq) SetSenderId(val int64) {
	p.SenderId = val
}

func (p *HistoryMessageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryMessageReq(%+v)", *p)
}

var fieldIDToName_HistoryMessageReq = map[int16]string{
	1: "sender_id",
}

type HistoryMessageResp struct {
	Messages []*ChatMessage `thrift:"messages,1,required" frugal:"1,required,list<ChatMessage>" json:"messages"`
}

func NewHistoryMessageResp() *HistoryMessageResp {
	return &HistoryMessageResp{}
}

func (p *HistoryMessageResp) InitDefault() {
}

func (p *HistoryMessageResp) GetMessages() (v []*ChatMessage) {
	return p.Messages
}
func (p *HistoryMessageResp) SetMessages(val []*ChatMessage) {
	p.Messages = val
}

func (p *HistoryMessageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryMessageResp(%+v)", *p)
}

var fieldIDToName_HistoryMessageResp = map[int16]string{
	1: "messages",
}

type ChatMessage struct {
	Id         int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	SenderId   int64  `thrift:"sender_id,2,required" frugal:"2,required,i64" json:"sender_id"`
	ReceiverId int64  `thrift:"receiver_id,3,required" frugal:"3,required,i64" json:"receiver_id"`
	Content    string `thrift:"content,4,required" frugal:"4,required,string" json:"content"`
	Timestamp  string `thrift:"timestamp,5,required" frugal:"5,required,string" json:"timestamp"`
}

func NewChatMessage() *ChatMessage {
	return &ChatMessage{}
}

func (p *ChatMessage) InitDefault() {
}

func (p *ChatMessage) GetId() (v int64) {
	return p.Id
}

func (p *ChatMessage) GetSenderId() (v int64) {
	return p.SenderId
}

func (p *ChatMessage) GetReceiverId() (v int64) {
	return p.ReceiverId
}

func (p *ChatMessage) GetContent() (v string) {
	return p.Content
}

func (p *ChatMessage) GetTimestamp() (v string) {
	return p.Timestamp
}
func (p *ChatMessage) SetId(val int64) {
	p.Id = val
}
func (p *ChatMessage) SetSenderId(val int64) {
	p.SenderId = val
}
func (p *ChatMessage) SetReceiverId(val int64) {
	p.ReceiverId = val
}
func (p *ChatMessage) SetContent(val string) {
	p.Content = val
}
func (p *ChatMessage) SetTimestamp(val string) {
	p.Timestamp = val
}

func (p *ChatMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessage(%+v)", *p)
}

var fieldIDToName_ChatMessage = map[int16]string{
	1: "id",
	2: "sender_id",
	3: "receiver_id",
	4: "content",
	5: "timestamp",
}

type AgentService interface {
	Ask(ctx context.Context, req *AskReq) (r *AskResp, err error)

	SendMessage(ctx context.Context, req *ChatMessageReq) (r *ChatMessageResp, err error)

	GetHistoryMessages(ctx context.Context, req *HistoryMessageReq) (r *HistoryMessageResp, err error)
}

type AgentServiceAskArgs struct {
	Req *AskReq `thrift:"req,1" frugal:"1,default,AskReq" json:"req"`
}

func NewAgentServiceAskArgs() *AgentServiceAskArgs {
	return &AgentServiceAskArgs{}
}

func (p *AgentServiceAskArgs) InitDefault() {
}

var AgentServiceAskArgs_Req_DEFAULT *AskReq

func (p *AgentServiceAskArgs) GetReq() (v *AskReq) {
	if !p.IsSetReq() {
		return AgentServiceAskArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceAskArgs) SetReq(val *AskReq) {
	p.Req = val
}

func (p *AgentServiceAskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceAskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceAskArgs(%+v)", *p)
}

var fieldIDToName_AgentServiceAskArgs = map[int16]string{
	1: "req",
}

type AgentServiceAskResult struct {
	Success *AskResp `thrift:"success,0,optional" frugal:"0,optional,AskResp" json:"success,omitempty"`
}

func NewAgentServiceAskResult() *AgentServiceAskResult {
	return &AgentServiceAskResult{}
}

func (p *AgentServiceAskResult) InitDefault() {
}

var AgentServiceAskResult_Success_DEFAULT *AskResp

func (p *AgentServiceAskResult) GetSuccess() (v *AskResp) {
	if !p.IsSetSuccess() {
		return AgentServiceAskResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceAskResult) SetSuccess(x interface{}) {
	p.Success = x.(*AskResp)
}

func (p *AgentServiceAskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceAskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceAskResult(%+v)", *p)
}

var fieldIDToName_AgentServiceAskResult = map[int16]string{
	0: "success",
}

type AgentServiceSendMessageArgs struct {
	Req *ChatMessageReq `thrift:"req,1" frugal:"1,default,ChatMessageReq" json:"req"`
}

func NewAgentServiceSendMessageArgs() *AgentServiceSendMessageArgs {
	return &AgentServiceSendMessageArgs{}
}

func (p *AgentServiceSendMessageArgs) InitDefault() {
}

var AgentServiceSendMessageArgs_Req_DEFAULT *ChatMessageReq

func (p *AgentServiceSendMessageArgs) GetReq() (v *ChatMessageReq) {
	if !p.IsSetReq() {
		return AgentServiceSendMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceSendMessageArgs) SetReq(val *ChatMessageReq) {
	p.Req = val
}

func (p *AgentServiceSendMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceSendMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceSendMessageArgs(%+v)", *p)
}

var fieldIDToName_AgentServiceSendMessageArgs = map[int16]string{
	1: "req",
}

type AgentServiceSendMessageResult struct {
	Success *ChatMessageResp `thrift:"success,0,optional" frugal:"0,optional,ChatMessageResp" json:"success,omitempty"`
}

func NewAgentServiceSendMessageResult() *AgentServiceSendMessageResult {
	return &AgentServiceSendMessageResult{}
}

func (p *AgentServiceSendMessageResult) InitDefault() {
}

var AgentServiceSendMessageResult_Success_DEFAULT *ChatMessageResp

func (p *AgentServiceSendMessageResult) GetSuccess() (v *ChatMessageResp) {
	if !p.IsSetSuccess() {
		return AgentServiceSendMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceSendMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChatMessageResp)
}

func (p *AgentServiceSendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceSendMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceSendMessageResult(%+v)", *p)
}

var fieldIDToName_AgentServiceSendMessageResult = map[int16]string{
	0: "success",
}

type AgentServiceGetHistoryMessagesArgs struct {
	Req *HistoryMessageReq `thrift:"req,1" frugal:"1,default,HistoryMessageReq" json:"req"`
}

func NewAgentServiceGetHistoryMessagesArgs() *AgentServiceGetHistoryMessagesArgs {
	return &AgentServiceGetHistoryMessagesArgs{}
}

func (p *AgentServiceGetHistoryMessagesArgs) InitDefault() {
}

var AgentServiceGetHistoryMessagesArgs_Req_DEFAULT *HistoryMessageReq

func (p *AgentServiceGetHistoryMessagesArgs) GetReq() (v *HistoryMessageReq) {
	if !p.IsSetReq() {
		return AgentServiceGetHistoryMessagesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceGetHistoryMessagesArgs) SetReq(val *HistoryMessageReq) {
	p.Req = val
}

func (p *AgentServiceGetHistoryMessagesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceGetHistoryMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceGetHistoryMessagesArgs(%+v)", *p)
}

var fieldIDToName_AgentServiceGetHistoryMessagesArgs = map[int16]string{
	1: "req",
}

type AgentServiceGetHistoryMessagesResult struct {
	Success *HistoryMessageResp `thrift:"success,0,optional" frugal:"0,optional,HistoryMessageResp" json:"success,omitempty"`
}

func NewAgentServiceGetHistoryMessagesResult() *AgentServiceGetHistoryMessagesResult {
	return &AgentServiceGetHistoryMessagesResult{}
}

func (p *AgentServiceGetHistoryMessagesResult) InitDefault() {
}

var AgentServiceGetHistoryMessagesResult_Success_DEFAULT *HistoryMessageResp

func (p *AgentServiceGetHistoryMessagesResult) GetSuccess() (v *HistoryMessageResp) {
	if !p.IsSetSuccess() {
		return AgentServiceGetHistoryMessagesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceGetHistoryMessagesResult) SetSuccess(x interface{}) {
	p.Success = x.(*HistoryMessageResp)
}

func (p *AgentServiceGetHistoryMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceGetHistoryMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceGetHistoryMessagesResult(%+v)", *p)
}

var fieldIDToName_AgentServiceGetHistoryMessagesResult = map[int16]string{
	0: "success",
}
